{"version":3,"sources":["serviceWorker.tsx","Types.tsx","Util.tsx","ScrambleText.tsx","ScoreCard.tsx","StatsCard.tsx","TimerDisplay.tsx","HistoryCard.tsx","HistoryDetail.tsx","EventPicker.tsx","SignInForm.tsx","WCACard.tsx","SettingsCard.tsx","Timer.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Penalty","timeSince","t","Date","now","rawTimeToString","time","h","Math","floor","pow","m","s","timeString","n","console","assert","result","padCs","timeToString","time_string","raw","pen","DNF","PlusTwo","timeToJson","timeFromJson","t_json","pen_str","timeToRaw","isFaster","t1","t2","t1_is_dnf","t2_is_dnf","compareTimes","bucketToJsonAvg","bucket","sorted_raws","slice","sort","map","num_solves","length","best","worst","avg","times","timestamp","firebase","Timestamp","ScrambleText","this","props","event","scramble_str","react","id","className","style","whiteSpace","scramble","React","ScoreCard","_this","edit_ctrls","onClick","edit_fn","delete_fn","rows","num_times","i","key","avg_size","push","avg_str","StatsCard","stats","pb_single","inspect_func","pb_single_loc","pb_avg","pb_avg_loc","inspPenalty","undefined","msToString","padMs","TimerDisplay","ms","colorClass","phase","name","toString","msPenToString","HistoryCard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hist","avg_lis","_loop","join","hist_to_list_items","load_more_func","HistoryDetail","avg_json","delete_func","avg_id","close_func","EventPicker","eventOptions","wca_db_str","react_select_esm","onChange","isDisabled","defaultValue","options","theme","objectSpread","borderRadius","colors","primary25","primary","getOptionLabel","_ref","openMenuOnFocus","blurInputOnSelect","styles","menuList","base","maxHeight","isOptionSelected","selOpt","selOptArr","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","tosUrl","privacyPolicyUrl","SignInForm","user","signOut","displayName","StyledFirebaseAuth_default","a","firebaseAuth","WCACard","state","single_or_avg","wca_pb","_this2","maybe_get_wca_pb","bind","fetch","wca_id","then","response","json","person_json","prevProps","_this3","which_kind","event_str","hasOwnProperty","setState","_this4","y_vals","home_times","data","x","y","victory_chart","height","victory_area","y0","fill","victory_line","labels","stroke","SettingsCard","updateFormContent","assertThisInitialized","submitWCAId","e","target","value","id_change_handler","onSubmit","type","Timer","intervalID","db","unsub_auth","onAuthStateChanged","subscribe_to_event","current_event","startTime","elapsed","penalty","scramble_img","__html","history","cur_event_listeners","auth_listener","window_width","innerWidth","handleKeyDown","handleKeyUp","handleTouchStart","handleTouchEnd","handleWindowSizeChange","changeEvent","changeWCAId","loadMoreHistory","toggle_last_penalty","delete_last_time","delete_avg","inspect_avg","uninspect_avg","setInterval","tick","document","addEventListener","clearInterval","removeEventListener","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","unsub_func","err","return","getScramble","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","target_event_doc","collection","doc","uid","unsub_history","orderBy","limit","onSnapshot","snap","avgs","docs","doc_ids","new_hist","forEach","last_hist_doc","unsub_bucket","bucket_times","get","saved","startAfter","new_avgs","new_keys","assign","alert","bucket_is_full","bucket_json","concat","current_event_doc","new_time","add","avg_doc_ref","set","merge","_this5","old_bucket","old_time","pop","error","new_bucket","new_bucket_json","recompute_pb_single","best_in_bucket","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","best_in_hist","new_pb_avg","deleted_time","_this6","delete","recompute_pb_avg","_this7","nextstate","timeTurnedRed","timetosave","saveTimeToDB","nextState","getElementById","_this8","code","timeToSave","selected","Array","log","new_id","preventDefault","values","avg1","avg2","d1","toDate","d2","flatMap","src_EventPicker","src_ScrambleText","TimerDisplay_TimerDisplay","src_ScoreCard","src_SignInForm","src_StatsCard","src_HistoryCard","src_WCACard","all_times_raw_array","src_HistoryDetail","src_SettingsCard","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","react_default","createElement","src_Timer","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c79e18d5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nexport interface Time {\n    raw: number;\n    pen?: Penalty;\n}\n\nexport enum Penalty {\n    DNF,\n    PlusTwo,\n}\n\nexport type PenString = \"dnf\" | \"plus\" | \"\";\n\nexport interface JsonTime {\n    raw: number,\n    pen: PenString,\n}\n\nexport interface JsonAvg {\n    best: number;\n    worst: number;\n    times: number[];\n    avg: number;\n    timestamp: firebase.firestore.Timestamp;\n}\n\nexport interface StatsRecord {\n    pb_single: number;\n    pb_single_loc: string; // a doc id, \"bucket\", or \"\"\n    pb_avg: number | null;\n    pb_avg_loc: string | null;\n}\n\nexport type TimerPhase =\n    | { name: \"waiting\" }\n    | { name: \"inspecting\" }\n    | { name: \"green\" }\n    | { name: \"red\"; timeTurnedRed: number }\n    | { name: \"running\" }\n    | { name: \"stopped\" };\n\nexport interface Event {\n    name: string;\n    avg_size: number;\n    scramble_str: string;\n    wca_db_str: string;\n}\n\nexport type WhichScramble = 0 | 1;\n","import { Time, Penalty, PenString, JsonTime, JsonAvg } from \"./Types\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\n// return the elapsed time since t\nfunction timeSince(t: number): number {\n    return Date.now() - t;\n}\n\n// helper function for rawTimeToString\n// pad a centisecond value with zeros until it's two digits\nfunction padCs(n: number): string {\n    console.assert(n >= 0 && n < 100, \"Invalid argument to padCs() (\" + n + \")\");\n\n    let result: string = \"\";\n\n    if (n < 10) {\n        result = result + \"0\" + n;\n    } else if (n < 100) {\n        result = result + n;\n    }\n\n    return result;\n}\n\n// pretty-print a centisecond value as a time in h:m:s.dc format\nfunction rawTimeToString(time: number): string {\n    if (time === -1) {\n        return \"DNF\";\n    }\n\n    // Get the h:m:s.dc components of the time\n    let h = Math.floor((time % (100 * 60 ** 3)) / (100 * 60 ** 2));\n    let m = Math.floor((time % (100 * 60 ** 2)) / (100 * 60));\n    let s = Math.floor((time % (100 * 60)) / 100);\n    let dc = Math.floor(time % 100);\n\n    let timeString: string = \"\";\n\n    if (h !== 0) {\n        timeString = timeString + h + \":\";\n    }\n    if (h !== 0 && m < 10) {\n        timeString = timeString + \"0\";\n    }\n    if (m !== 0) {\n        timeString = timeString + m + \":\";\n    }\n    if (m !== 0 && s < 10) {\n        timeString = timeString + \"0\";\n    }\n\n    timeString = timeString + s + \".\" + padCs(dc);\n\n    return timeString;\n}\n\n// print a Time value, including penalties\nfunction timeToString(t: Time): string {\n    let time_string = rawTimeToString(t.raw);\n    if (t.pen === Penalty.DNF) {\n        return \"DNF (\" + time_string + \")\";\n    } else if (t.pen === Penalty.PlusTwo) {\n        return rawTimeToString(t.raw + 200);\n        // return time_string + \" + 2 = \" + rawTimeToString(t.raw + 200);\n    } else {\n        return time_string;\n    }\n}\n\n// print a string penalty code (for backend use)\nfunction penToString(pen: Penalty | undefined): PenString {\n    if (pen === Penalty.DNF) {\n        return \"dnf\";\n    } else if (pen === Penalty.PlusTwo) {\n        return \"plus\";\n    } else {\n        return \"\";\n    }\n}\n\n// convert penalty codes to Penalty values\nfunction penFromString(pen_str: PenString): Penalty | undefined {\n    if (pen_str === \"dnf\") {\n        return Penalty.DNF;\n    } else if (pen_str === \"plus\") {\n        return Penalty.PlusTwo;\n    } else {\n        return undefined;\n    }\n}\n\nfunction timeToJson(t: Time): JsonTime {\n    return {\n        raw: t.raw,\n        pen: penToString(t.pen),\n    }\n}\n\nfunction timeFromJson(t_json: JsonTime): Time {\n    return {\n        raw: t_json.raw,\n        pen: penFromString(t_json.pen),\n    }\n}\n\n// convert a Time object to centiseconds (-1 = DNF)\nfunction timeToRaw(t: Time): number {\n    if (t.pen === Penalty.DNF) {\n        return -1;\n    } else if (t.pen === Penalty.PlusTwo) {\n        return t.raw + 200;\n    } else {\n        return t.raw;\n    }\n}\n\n// returns true if t1 is faster than t2\n// ties return false\nfunction isFaster(t1: number, t2: number) {\n    const t1_is_dnf = t1 === -1;\n    const t2_is_dnf = t2 === -1;\n\n    if (t1_is_dnf && !t2_is_dnf) {\n        return false;\n    } else if (!t1_is_dnf && t2_is_dnf) {\n        return true;\n    } else if (t1_is_dnf && t2_is_dnf) {\n        return false;\n    } else {\n        return t1 < t2;\n    }\n}\n\n// returns negative if t1 is faster than t2, positive if slower, 0 if equal\nfunction compareTimes(t1: Time, t2: Time): number {\n    const t1_is_dnf = t1.pen === Penalty.DNF;\n    const t2_is_dnf = t2.pen === Penalty.DNF;\n\n    if (t1_is_dnf && !t2_is_dnf) {\n        return 1;\n    } else if (!t1_is_dnf && t2_is_dnf) {\n        return -1;\n    } else if (t1_is_dnf && t2_is_dnf) {\n        return 0;\n    } else {\n        const t1_raw = timeToRaw(t1);\n        const t2_raw = timeToRaw(t2);\n        return t1_raw - t2_raw;\n    }\n}\n\n// map a bucket of times to a Json object for storage\nfunction bucketToJsonAvg(bucket: Time[]): JsonAvg {\n    const sorted_raws = bucket.slice(0).sort(compareTimes).map(timeToRaw);\n\n    const num_solves = sorted_raws.length;\n    console.assert(num_solves === 5 || num_solves === 3);\n    const best = sorted_raws[0];\n    const worst = sorted_raws[num_solves - 1];\n\n    let avg = -1;\n\n    if (num_solves === 5 && sorted_raws[3] !== -1) {\n        avg = (sorted_raws[1] + sorted_raws[2] + sorted_raws[3]) / 3;\n    } else if (num_solves === 3 && sorted_raws[2] !== -1) {\n        avg = (sorted_raws[0] + sorted_raws[1] + sorted_raws[2]) / 3;\n    }\n\n    return {\n        times: bucket.map(timeToRaw),\n        best: best,\n        worst: worst,\n        avg: Math.floor(avg),\n        timestamp: firebase.firestore.Timestamp.now(),\n    }\n}\n\nexport {\n    rawTimeToString,\n    timeToString,\n    timeSince,\n    penToString,\n    timeToJson,\n    timeToRaw,\n    timeFromJson,\n    bucketToJsonAvg,\n    isFaster,\n    compareTimes,\n};\n","import * as React from \"react\";\nimport { Event } from \"./Types\";\n\ninterface Props {\n    scramble: string,\n    event: Event,\n}\nclass ScrambleText extends React.PureComponent<Props, {}> {\n    public render() {\n        return (\n            this.props.event.scramble_str === \"minx\" ? \n                <div id=\"scramble_area\" className=\"f3 tc\" style={{whiteSpace: \"pre-wrap\"}}>\n                    {this.props.scramble}\n                </div> :\n                <div id=\"scramble_area\" className=\"f3 tc\">\n                    {this.props.scramble}\n                </div>\n        );\n    }\n}\n\nexport default ScrambleText;\n","import * as React from \"react\";\nimport { timeToString, bucketToJsonAvg, rawTimeToString } from \"./Util\";\nimport { Time, Penalty } from \"./Types\";\n\n\ninterface Props {\n    times: Time[];\n    edit_fn: (arg0: Penalty) => void;\n    delete_fn: () => void;\n    avg_size: number;\n}\n\nclass ScoreCard extends React.PureComponent<Props, {}> {\n    public render() {\n        // TODO shade the selected penalty button\n        const edit_ctrls = <span className=\"\">\n                               <a className=\"link dim br1 bt bb bl ph1 dib black pointer\"\n                                  onClick={() => this.props.edit_fn(Penalty.PlusTwo)}>+2\n                               </a>\n                               <a className=\"link dim br1 ba ph1 dib black pointer\"\n                                  onClick={() => this.props.edit_fn(Penalty.DNF)}>DNF\n                               </a>\n                               <a className=\"link dim br1 bt bb br ph1 dib black pointer\"\n                                  onClick={() => this.props.delete_fn()}>×\n                               </a>\n                           </span>;\n\n        // build array of scorecard rows\n        let rows = [];\n        const num_times = this.props.times.length;\n\n        for (let i = 0; i < num_times; i++) {\n            let t = this.props.times[i];\n            rows[i] = (\n                <li key={i} className=\"flex justify-between ph2 pv2 bb b--light-silver\">\n                    {timeToString(t)}\n                    {i === num_times - 1 ? edit_ctrls : \"\"}\n                </li>\n            );\n        }\n\n        while (rows.length < this.props.avg_size) {\n            rows.push(\n                <li key={rows.length} className=\"ph2 pv2 bb b--light-silver\">\n                    &nbsp;\n                </li>\n            );\n        }\n\n        // Display the avg. if it's done\n        let avg_str = \"--\";\n        if (this.props.times.length === this.props.avg_size) {\n            avg_str = rawTimeToString(bucketToJsonAvg(this.props.times).avg);\n        }\n        return (\n            <div className=\"center w-90 pt1\">\n                <span className=\"f5 b small-caps\">Current Average:</span>\n                <span className=\"f5\"> {avg_str}</span>\n                <ul className=\"list ph0 ml0 ba b--light-silver br1\">{rows}</ul>\n            </div>\n        );\n                // <h1 className=\"f5 small-caps\">Current Average:</h1>\n                // <span className=\"f5\"> {avg_str}</span>\n    }\n}\n\nexport default ScoreCard;\n","import * as React from \"react\";\nimport { Event, JsonAvg, StatsRecord } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\n\ninterface Props {\n    event: Event;\n    stats: StatsRecord;\n    inspect_func: (id: string) => void;\n}\n\nclass StatsCard extends React.PureComponent<Props, {}> {\n    public render() {\n        const avg_size_str = this.props.event.avg_size === 5 ? \"Ao5\" : \"Mo3\";\n        return (\n            <div className=\"outline\">\n                <dl className=\"lh-title ml3\">\n                    <dt className=\"f6 b\">Best Single</dt>\n                    {\n                        this.props.stats.pb_single === -2\n                            ? <dd className=\"ml0\">N/A</dd>\n                            : <dd className=\"ml0\">\n                              <span className=\"pointer bg-animate bg-white hover-bg-light-silver\"\n                                    onClick={() =>\n                                        this.props.inspect_func(this.props.stats.pb_single_loc)\n                                    }\n                              >\n                                {rawTimeToString(this.props.stats.pb_single)}\n                              </span>\n                              </dd>\n                    }\n                    <dt className=\"f6 b\">Best Avg.</dt>\n                    {\n                        (this.props.stats.pb_avg === null || this.props.stats.pb_avg_loc === null)\n                            ? <dd className=\"ml0\">N/A</dd>\n                            : <dd className=\"ml0\">\n                              <span className=\"pointer bg-animate bg-white hover-bg-light-silver\"\n                                    onClick={() =>\n                                        this.props.inspect_func(this.props.stats.pb_avg_loc!)\n                                    }\n                              >\n                                {rawTimeToString(this.props.stats.pb_avg)}\n                              </span>\n                              </dd>\n                    }\n                </dl>\n            </div>\n        );\n    }\n}\n\nexport default StatsCard;\n","import * as React from \"react\";\nimport { Penalty, TimerPhase } from \"./Types\";\n\n// The timer display is the only component that operates at millisecond precision,\n// so all the millisecond-related helper functions are in here.\n// Times are truncated to centiseconds as soon as they are stored in the bucket.\n// Any ms value outside this file (or its wiring in Timer.tsx) probably indicates a bug.\n\n// returns the penalty incurred by an inspection time\nfunction inspPenalty(time: number): Penalty | undefined {\n    let pen = undefined;\n    if (time >= 17000) {\n        pen = Penalty.DNF;\n    } else if (time >= 15000) {\n        pen = Penalty.PlusTwo;\n    }\n    return pen;\n}\n\n// pretty-print an ms value as an inspection time\nfunction msToInspString(ms: number): string {\n    if (ms >= 17000) {\n        return \"DNF\";\n    } else if (ms >= 15000) {\n        return \"+2\";\n    }\n\n    let s = Math.floor((ms % (1000 * 60)) / 1000);\n    return (15 - s).toString();\n}\n\n// helper function for msToString\n// pad a ms value with zeros until it's three digits\nfunction padMs(n: number): string {\n    console.assert(n >= 0 && n < 1000, \"Invalid argument to padMs() (\" + n + \")\");\n\n    let result: string = \"\";\n\n    if (n < 10) {\n        result = result + \"00\" + n;\n    } else if (n < 100) {\n        result = result + \"0\" + n;\n    } else if (n < 1000) {\n        result = result + n;\n    }\n\n    return result;\n}\n\n// pretty-print a ms value as a time in h:m:s.dcm format\nfunction msToString(time: number): string {\n    // Get the h:m:s.dcm components of the time\n    let h = Math.floor((time % (1000 * 60 ** 3)) / (1000 * 60 ** 2));\n    let m = Math.floor((time % (1000 * 60 ** 2)) / (1000 * 60));\n    let s = Math.floor((time % (1000 * 60)) / 1000);\n    let dcm = Math.floor(time % 1000);\n\n    let timeString: string = \"\";\n\n    if (h !== 0) {\n        timeString = timeString + h + \":\";\n    }\n    if (h !== 0 && m < 10) {\n        timeString = timeString + \"0\";\n    }\n    if (m !== 0) {\n        timeString = timeString + m + \":\";\n    }\n    if (m !== 0 && s < 10) {\n        timeString = timeString + \"0\";\n    }\n\n    timeString = timeString + s + \".\" + padMs(dcm);\n\n    return timeString;\n}\n\nfunction msPenToString(ms: number, pen: Penalty) {\n    let time_string = msToString(ms);\n    if (pen === Penalty.DNF) {\n        return \"DNF (\" + time_string + \")\";\n    } else if (pen === Penalty.PlusTwo) {\n        return time_string + \" + 2 = \" + msToString(ms + 2000);\n    } else {\n        return time_string;\n    }\n}\n\ninterface Props {\n    ms: number;\n    phase: TimerPhase;\n    pen: Penalty | undefined;\n}\n\nclass TimerDisplay extends React.Component<Props, {}> {\n    public render() {\n        // Set the color of the timer\n        let colorClass = \"black\";\n        if (this.props.phase.name === \"red\") {\n            colorClass = \"red\";\n        } else if (this.props.phase.name === \"green\") {\n            colorClass = \"green\";\n        }\n\n        // Pretty-print the timer readout\n        let timeString: string;\n        if (\n            this.props.phase.name === \"inspecting\" ||\n            this.props.phase.name === \"red\" ||\n            this.props.phase.name === \"green\"\n        ) {\n            timeString = msToInspString(this.props.ms);\n        } else if (\n            (this.props.phase.name === \"stopped\" || this.props.phase.name === \"waiting\") &&\n            this.props.pen !== undefined\n        ) {\n            timeString = msPenToString(this.props.ms, this.props.pen);\n        } else {\n            timeString = msToString(this.props.ms);\n        }\n        return (\n            <p id={\"timer_text\"} className={\"noselect w-100 tc f1 code \" + colorClass}>\n                {timeString}\n            </p>\n        );\n    }\n}\n\n// export default TimerDisplay;\nexport { inspPenalty, TimerDisplay };\n","import * as React from \"react\";\nimport { Time, JsonAvg } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\n\n\ninterface Props {\n    hist: {[id: string]: JsonAvg};\n    load_more_func: any;\n    inspect_func: (id: string) => void;\n}\n\nclass HistoryCard extends React.PureComponent<Props, {}> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    private hist_to_list_items(hist: {[id: string]: JsonAvg}): JSX.Element[] {\n        let avg_lis = [];\n\n        for (let id in hist) {\n            avg_lis.push(\n                <li key={id}\n                    className=\"bg-animate bg-white hover-bg-light-silver pointer\"\n                    onClick={() => this.props.inspect_func(id)}\n                >\n                    <b className=\"pt1\">{rawTimeToString(hist[id].avg)}</b>\n                    <div>{hist[id].times.map(rawTimeToString).join(\" \")}</div>\n                </li>\n            );\n        }\n\n        return avg_lis;\n    }\n\n    public render() {\n        return (\n            <div className=\"dn db-ns overflow-auto\">\n                <ul className=\"list pl0 mv0\">\n                    {\n                        this.hist_to_list_items(this.props.hist)\n                    }\n                </ul>\n                <div className=\"pv3 tc\">\n                    <a className=\"ba pointer ph1\" onClick={this.props.load_more_func}>Load more</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HistoryCard;\n","import * as React from \"react\";\nimport { Time, JsonAvg } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\ninterface Props {\n    avg_id: string;\n    avg_json: JsonAvg;\n    // scrambles_ref?: firebase.firestore.CollectionReference;\n    delete_func: (id: string) => void;\n    close_func: () => void;\n}\n\nclass HistoryDetail extends React.PureComponent<Props, {}> {\n    public render() {\n        return (\n            <div>\n                <h1 className=\"f4 bg-near-black white mv0 pv2 ph3\">Average detail</h1>\n                <div className=\"pa3 bt\">\n                  <p className=\"f6 f5-ns lh-copy measure mv0\">\n                  {rawTimeToString(this.props.avg_json.avg)}\n                  </p>\n                  <p className=\"f6 f5-ns lh-copy measure mv0\">\n                  {this.props.avg_json.times.map(rawTimeToString).join(\" \")}\n                  </p>\n                </div>\n                <div className=\"pv3 tc\">\n                    <a className=\"ba pointer ph1\"\n                       onClick={() => {\n                           this.props.delete_func(this.props.avg_id);\n                           this.props.close_func();\n                       }}\n                    >Delete Average</a>\n                </div>\n                <div className=\"pv3 tc\">\n                    <a className=\"ba pointer ph1\" onClick={this.props.close_func}>Close</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HistoryDetail;\n","import * as React from \"react\";\nimport Select from \"react-select\";\nimport { Event } from \"./Types\";\n\ninterface Props {\n  onChange: (selected?: Event | Event[] | null) => void;\n  isDisabled: boolean;\n}\n\nclass EventPicker extends React.PureComponent<Props, {}> {\n  private eventOptions = [\n    { name: \"2x2x2\", avg_size: 5, scramble_str: \"222\", wca_db_str: \"222\" },\n    { name: \"3x3x3\", avg_size: 5, scramble_str: \"333\", wca_db_str: \"333\" },\n    { name: \"4x4x4\", avg_size: 5, scramble_str: \"444fast\", wca_db_str: \"444\" },\n    { name: \"5x5x5\", avg_size: 5, scramble_str: \"555\", wca_db_str: \"555\" },\n    { name: \"6x6x6\", avg_size: 3, scramble_str: \"666\", wca_db_str: \"666\" },\n    { name: \"7x7x7\", avg_size: 3, scramble_str: \"777\", wca_db_str: \"777\" },\n    { name: \"3x3x3 OH\", avg_size: 5, scramble_str: \"333\", wca_db_str: \"333oh\" },\n    { name: \"3x3x3 BLD\", avg_size: 3, scramble_str: \"333\", wca_db_str: \"333bf\" },\n    { name: \"Pyraminx\", avg_size: 5, scramble_str: \"pyram\", wca_db_str: \"pyram\" },\n    { name: \"Megaminx\", avg_size: 5, scramble_str: \"minx\", wca_db_str: \"minx\" },\n    { name: \"Square-1\", avg_size: 5, scramble_str: \"sq1\", wca_db_str: \"sq1\" },\n    { name: \"Clock\", avg_size: 5, scramble_str: \"clock\", wca_db_str: \"clock\" },\n    { name: \"Skewb\", avg_size: 5, scramble_str: \"skewb\", wca_db_str: \"skewb\" },\n  ];\n\n  public render() {\n    const dropdownStyle = (base: any) => ({\n      // make the menu tall enough that all events are visible\n      maxHeight: 500,\n    });\n\n    return (\n      <React.Fragment>\n        <Select\n          id={\"event_select\"}\n          onChange={this.props.onChange}\n          isDisabled={this.props.isDisabled}\n          defaultValue={this.eventOptions[1]}\n          options={this.eventOptions}\n          theme={theme => ({\n            ...theme,\n            borderRadius: 0,\n            colors: {\n              ...theme.colors,\n              primary25: \"gray\",\n              primary: \"black\",\n            },\n          })}\n          getOptionLabel={({ name }) => name}\n          openMenuOnFocus={true}\n          blurInputOnSelect={true}\n          styles={{ menuList: dropdownStyle }}\n          // This looks like some wacky bug in react-select.\n          // Without the following line, all menu options appear selected.\n          // source: https://stackoverflow.com/questions/52000594/every-menu-option-rendered-as-selected-strange-workaround\n          isOptionSelected={(selOpt, selOptArr) => false}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventPicker;\n","import * as React from \"react\";\nimport * as firebase from \"firebase/app\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport \"firebase/auth\";\n\nconst uiConfig = {\n  // autoUpgradeAnonymousUsers: true,\n  callbacks: {\n    signInSuccessWithAuthResult: function(authResult: firebase.auth.UserCredential, redirectUrl: string) {\n      // User successfully signed in.\n      // Return type determines whether we continue the redirect automatically\n      // or whether we leave that to developer to handle.\n      return false;\n    },\n    // signInFailure callback must be provided to handle merge conflicts which\n    // occur when an existing credential is linked to an anonymous user.\n    // signInFailure: function(error: firebaseui.auth.AuthUIError) {\n    //   // For merge conflicts, the error.code will be\n    //   // 'firebaseui/anonymous-upgrade-merge-conflict'.\n    //   if (error.code != 'firebaseui/anonymous-upgrade-merge-conflict') {\n    //     return Promise.resolve();\n    //   }\n\n    //   const sign_in_anyway = window.confirm(\"An account for that user already exists. Signing in will erase times saved in anonymous mode. Are you sure you want to sign in?\");\n\n    //   if (sign_in_anyway) {\n    //     // Delete the anonymous user\n    //     if (firebase.auth().currentUser !== null && firebase.auth().currentUser!.isAnonymous) {\n    //       firebase.auth().currentUser!.delete();\n    //     }\n    //     // The credential the user tried to sign in with.\n    //     var cred = error.credential;\n    //     // Finish sign-in.\n    //     // return firebase.auth().signInWithCredential(cred);\n    //     firebase.auth().signInWithCredential(cred);\n    //   }\n    //   return Promise.resolve();\n    // },\n  },\n  signInFlow: 'redirect',\n  signInSuccessUrl: '',\n  signInOptions: [\n    // Leave the lines as is for the providers you want to offer your users.\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    // firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    // firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n    // firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    // firebase.auth.PhoneAuthProvider.PROVIDER_ID\n  ],\n  // Terms of service url.\n  tosUrl: '<your-tos-url>',\n  // Privacy policy url.\n  privacyPolicyUrl: '<your-privacy-policy-url>'\n};\n\ninterface Props {\n  user: firebase.User | null;\n}\n\nclass SignInForm extends React.PureComponent<Props> {\n  render() {\n    if (!this.props.user) {\n      return (\n        <div className=\"outline\">\n          <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"pa2 tc\">\n          <a className=\"dark-blue no-underline underline-hover pointer\" onClick={() => firebase.auth().signOut()}>{\"Sign out \" + this.props.user.displayName + \"?\"}</a>\n        </div>\n        )\n    }\n  }\n}\n\nexport default SignInForm;","import * as React from \"react\";\nimport { VictoryChart, VictoryLine, VictoryArea } from \"victory\";\nimport { Event } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\n\ninterface Props {\n    event: Event;\n    wca_id: string;\n    home_times: number[];\n}\n\ntype result_kind = \"single\" | \"average\";\n\ninterface State {\n    single_or_avg: result_kind;\n    wca_pb?: number;\n}\n\nclass WCACard extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { single_or_avg: \"single\", wca_pb: undefined }\n    }\n\n    componentDidMount() {\n        const WCA_API_PREFIX = \"https://www.worldcubeassociation.org/api/v0/persons/\"\n\n        this.maybe_get_wca_pb= this.maybe_get_wca_pb.bind(this);\n\n        fetch(WCA_API_PREFIX + this.props.wca_id)\n          .then(function(response: Response) {\n            return response.json();\n          })\n          .then((person_json) => {\n            this.maybe_get_wca_pb(person_json, this.state.single_or_avg);\n          });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const WCA_API_PREFIX = \"https://www.worldcubeassociation.org/api/v0/persons/\"\n\n        if (this.props.event !== prevProps.event || this.props.wca_id !== prevProps.wca_id) {\n            fetch(WCA_API_PREFIX + this.props.wca_id)\n              .then(function(response: Response) {\n                return response.json();\n              })\n              .then((person_json) => {\n                this.maybe_get_wca_pb(person_json, this.state.single_or_avg);\n              });\n        }\n    }\n\n    // returns false if there are no official results for the event/kind pair\n    // otherwise, returns true and sets the state to reflect the WCA pb\n    private maybe_get_wca_pb(person_json: any, which_kind: result_kind): boolean {\n        const event_str = this.props.event.wca_db_str;\n\n        if (!person_json.hasOwnProperty(\"personal_records\")) {\n            this.setState({\n                wca_pb: undefined,\n            })\n\n            return false;\n        } else if (!person_json[\"personal_records\"].hasOwnProperty(event_str)) {\n            this.setState({\n                wca_pb: undefined,\n            })\n\n            return false;\n        } else if (!person_json[\"personal_records\"][event_str].hasOwnProperty(which_kind)) {\n            this.setState({\n                wca_pb: undefined,\n            })\n\n            return false;\n        } else {\n            this.setState({\n                wca_pb: person_json[\"personal_records\"][event_str][which_kind][\"best\"],\n            })\n\n            return true;\n        }\n    }\n\n    public render() {\n        const tachyons_styles = \"dn db-ns outline\"\n        if (this.state.wca_pb === undefined) {\n            return (\n                <div className={tachyons_styles}>\n                    <p className=\"tc\">No WCA data available.</p>\n                </div>\n            );\n        } else {\n            const y_vals = this.props.home_times;\n\n            let data = [];\n\n            for (let x = 0; x < y_vals.length; x++) {\n                data.push({ x: x, y: y_vals[x] })\n            }\n\n            return (\n                <div className={tachyons_styles}>\n                    <VictoryChart\n                    height={200}\n                    >\n                        <VictoryArea\n                            data={data}\n                            y0={() => this.state.wca_pb!}\n                            style={{\n                                data: {\n                                    fill: \"#cccccc\"\n                                } \n                            }}\n                        />\n                        <VictoryLine\n                            labels={[rawTimeToString(this.state.wca_pb)]}\n                            style={{\n                                data: {\n                                    stroke: \"#ff0000\"\n                                }\n                            }}\n                            y={() => this.state.wca_pb!}\n                        />\n                    </VictoryChart>\n                </div>\n            );\n        }\n    }\n}\n\nexport default WCACard;\n","import * as React from \"react\";\n\ninterface Props {\n    wca_id: string;\n    id_change_handler: (event: React.ChangeEvent<HTMLFormElement>, new_id: string) => void;\n}\n\ninterface State {\n    wca_id: string;\n}\n\nclass SettingsCard extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            wca_id: this.props.wca_id,\n        };\n\n        this.updateFormContent = this.updateFormContent.bind(this);\n        this.submitWCAId = this.submitWCAId.bind(this);\n    }\n\n    private updateFormContent(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ wca_id: e.target.value });\n    }\n\n    private submitWCAId(e: React.ChangeEvent<HTMLFormElement>) {\n        this.props.id_change_handler(e, this.state.wca_id);\n    }\n\n    public render() {\n        return (\n            <div className=\"outline\" id=\"event_sel\">\n                <div className=\"f5 b small-caps tc\">Settings</div>\n\n                <form className=\"pa1 black-80\" onSubmit={this.submitWCAId}>\n                    <div className=\"measure\">\n                        <label className=\"f6 b db mb2\">WCA ID</label>\n                        <input\n                            id=\"name\"\n                            className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n                            type=\"text\"\n                            onChange={this.updateFormContent}\n                            value={this.state.wca_id}\n                        />\n                        <input type=\"submit\" value=\"Set\" />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default SettingsCard;\n","import * as React from \"react\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport {\n    timeSince,\n    timeToJson,\n    timeToRaw,\n    timeFromJson,\n    bucketToJsonAvg,\n    isFaster,\n    compareTimes,\n} from \"./Util\";\nimport { Time, Penalty, JsonAvg, TimerPhase, WhichScramble, Event, StatsRecord } from \"./Types\";\nimport ScrambleText from \"./ScrambleText\";\nimport ScoreCard from \"./ScoreCard\";\nimport StatsCard from \"./StatsCard\";\nimport { inspPenalty, TimerDisplay } from \"./TimerDisplay\";\nimport HistoryCard from \"./HistoryCard\";\nimport HistoryDetail from \"./HistoryDetail\";\nimport EventPicker from \"./EventPicker\";\nimport SignInForm from \"./SignInForm\";\nimport WCACard from \"./WCACard\";\nimport SettingsCard from \"./SettingsCard\";\n\ninterface Model {\n    user: firebase.User | null;\n    wca_id: string;\n    startTime: number;\n    elapsed: number;\n    phase: TimerPhase;\n    penalty?: Penalty;\n    bucket: Time[];\n    scramble: string;\n    // scramble_img: React.SVGProps<SVGSVGElement>;\n    scramble_img: { __html: string };\n    current_event: Event;\n    history: { [id: string]: JsonAvg };\n    last_hist_doc?: firebase.firestore.QueryDocumentSnapshot;\n    inspect_avg?: string;\n    cur_event_listeners: Function[];\n    auth_listener: firebase.Unsubscribe;\n    stats: StatsRecord;\n    window_width: number;\n}\n\ndeclare var getScramble: any;\n\nclass Timer extends React.PureComponent<{}, Model> {\n    private intervalID: number;\n    private db = firebase.firestore();\n\n    constructor(props: {}) {\n        super(props);\n\n        const unsub_auth = firebase.auth().onAuthStateChanged(user => {\n            this.setState({ user: user });\n            this.subscribe_to_event(this.state.current_event);\n        });\n\n        this.state = {\n            user: null,\n            wca_id: \"\",\n            startTime: 0,\n            elapsed: 0,\n            phase: { name: \"waiting\" },\n            penalty: undefined,\n            bucket: [],\n            scramble: \"Loading scramble...\",\n            scramble_img: { __html: \"\" },\n            current_event: { name: \"3x3x3\", avg_size: 5, scramble_str: \"333\", wca_db_str: \"333\" },\n            history: {},\n            cur_event_listeners: [],\n            auth_listener: unsub_auth,\n            stats: {\n                pb_single: -2,\n                pb_single_loc: \"\",\n                pb_avg: null,\n                pb_avg_loc: null,\n            },\n            window_width: window.innerWidth,\n        };\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleTouchStart = this.handleTouchStart.bind(this);\n        this.handleTouchEnd = this.handleTouchEnd.bind(this);\n        this.handleWindowSizeChange = this.handleWindowSizeChange.bind(this);\n        this.changeEvent = this.changeEvent.bind(this);\n        this.changeWCAId = this.changeWCAId.bind(this);\n        this.loadMoreHistory = this.loadMoreHistory.bind(this);\n        this.toggle_last_penalty = this.toggle_last_penalty.bind(this);\n        this.delete_last_time = this.delete_last_time.bind(this);\n        this.delete_avg = this.delete_avg.bind(this);\n        this.inspect_avg = this.inspect_avg.bind(this);\n        this.uninspect_avg = this.uninspect_avg.bind(this);\n\n        this.intervalID = 0;\n    }\n\n    public componentDidMount() {\n        this.intervalID = window.setInterval(() => this.tick(), 1);\n\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n        document.addEventListener(\"keyup\", this.handleKeyUp);\n        document.addEventListener(\"touchstart\", this.handleTouchStart);\n        document.addEventListener(\"touchend\", this.handleTouchEnd);\n\n        window.addEventListener(\"resize\", this.handleWindowSizeChange);\n\n        document.addEventListener(\"selectstart\", () => {\n            return false;\n        });\n    }\n\n    public componentWillUnmount() {\n        window.clearInterval(this.intervalID);\n\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n        document.removeEventListener(\"keyup\", this.handleKeyUp);\n\n        window.removeEventListener(\"resize\", this.handleWindowSizeChange);\n\n        document.addEventListener(\"selectstart\", () => {\n            return false;\n        });\n\n        // stop listening to any firestore docs\n        for (var unsub_func of this.state.cur_event_listeners) {\n            unsub_func();\n        }\n\n        this.state.auth_listener();\n    }\n\n    private subscribe_to_event(e: Event) {\n        this.setState({\n            scramble: getScramble(e.scramble_str),\n        });\n\n        // unsub from previous event\n        for (var unsub_func of this.state.cur_event_listeners) {\n            unsub_func();\n        }\n\n        if (this.state.user === null) {\n            return;\n        } else {\n            const target_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(e.wca_db_str);\n\n            // Fetch event history\n            const unsub_history = target_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"timestamp\", \"desc\")\n                .limit(25)\n                .onSnapshot(snap => {\n                    const avgs = snap.docs.map(doc => doc.data() as JsonAvg);\n                    const doc_ids = snap.docs.map(doc => doc.id);\n\n                    let new_hist: { [id: string]: JsonAvg } = {};\n                    doc_ids.forEach((id, i) => (new_hist[id] = avgs[i]));\n\n                    this.setState({\n                        history: new_hist,\n                        last_hist_doc: snap.docs[snap.docs.length - 1],\n                    });\n                });\n\n            // Fetch current average\n            const unsub_bucket = target_event_doc.onSnapshot(snap => {\n                let bucket_times = [];\n\n                if (snap.get(\"bucket\") !== undefined) {\n                    bucket_times = snap.get(\"bucket\").map(timeFromJson);\n                }\n\n                this.setState({\n                    bucket: bucket_times,\n                });\n            });\n\n            this.setState((state, props) => {\n                return { ...state, cur_event_listeners: [unsub_bucket, unsub_history] };\n            });\n\n            // Fetch event stats\n            const unsub_stats = target_event_doc.onSnapshot(snap => {\n                const saved = snap.get(\"stats\");\n                if (saved === undefined) {\n                    this.setState({\n                        stats: {\n                            pb_single: -2,\n                            pb_single_loc: \"\",\n                            pb_avg: null,\n                            pb_avg_loc: null,\n                        },\n                    });\n                } else {\n                    this.setState({\n                        stats: {\n                            pb_single: saved.pb_single === undefined ? -2 : saved.pb_single,\n                            pb_single_loc:\n                                saved.pb_single_loc === undefined ? \"\" : saved.pb_single_loc,\n                            pb_avg: saved.pb_avg === undefined ? null : saved.pb_avg,\n                            pb_avg_loc: saved.pb_avg_loc === undefined ? null : saved.pb_avg_loc,\n                        },\n                    });\n                }\n            });\n        }\n    }\n\n    private loadMoreHistory() {\n        if (this.state.user === null) {\n            alert(\"Error (loadMoreHistory): User is null\");\n            return;\n        } else {\n            const target_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n\n            target_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"timestamp\", \"desc\")\n                .limit(25)\n                .startAfter(this.state.last_hist_doc)\n                .get()\n                .then(snap => {\n                    if (snap.docs.length === 0) {\n                        return;\n                    }\n\n                    const new_avgs = snap.docs.map(doc => doc.data() as JsonAvg);\n                    const new_keys = snap.docs.map(doc => doc.id);\n                    let new_hist: { [id: string]: JsonAvg } = {};\n                    new_keys.forEach((id, i) => (new_hist[id] = new_avgs[i]));\n\n                    this.setState((state, props) => {\n                        return {\n                            history: Object.assign({}, state.history, new_hist),\n                            last_hist_doc: snap.docs[snap.docs.length - 1],\n                        };\n                    });\n                });\n        }\n    }\n\n    private saveTimeToDB(t: Time): void {\n        // if there's no current user the time is discarded\n        if (this.state.user === null) {\n            alert(\"Error (saveTimeToDB): User is null\");\n        } else {\n            // this function is called right before setstate, so we need to\n            // manually compute what the bucket will look like on the next render\n            const bucket_is_full = this.state.bucket.length === this.state.current_event.avg_size;\n            const next_bucket = bucket_is_full ? [t] : this.state.bucket.concat([t]);\n            const bucket_json = next_bucket.map(timeToJson);\n\n            // get a path to the db document for the current event\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n\n            // if we finished an avg, save it to the db\n            const new_time = timeToRaw(t);\n            const pb_single = this.state.stats.pb_single;\n            const pb_single_loc = this.state.stats.pb_single_loc;\n            const pb_avg = this.state.stats.pb_avg;\n            const pb_avg_loc = this.state.stats.pb_avg_loc;\n\n            if (bucket_is_full) {\n                const avg_json = bucketToJsonAvg(this.state.bucket);\n                current_event_doc\n                    .collection(\"Avgs\")\n                    .add(avg_json)\n                    .then(avg_doc_ref => {\n                        // if the current pb single is in the bucket and not\n                        // about to be beaten by the new time, update its location\n                        // (checking now saves a query if we did just break the pb)\n                        if (pb_single_loc === \"bucket\" && isFaster(pb_single, new_time)) {\n                            current_event_doc.set(\n                                {\n                                    stats: {\n                                        pb_single_loc: avg_doc_ref.id,\n                                    },\n                                },\n                                { merge: true }\n                            );\n                        }\n\n                        // Check for a new PB avg and update stats if necessary\n                        if (pb_avg === null || isFaster(avg_json.avg, pb_avg)) {\n                            current_event_doc.set(\n                                {\n                                    stats: {\n                                        pb_avg: avg_json.avg,\n                                        pb_avg_loc: avg_doc_ref.id,\n                                    },\n                                },\n                                { merge: true }\n                            );\n                        }\n                    });\n            }\n\n            // Check for a new PB single and update stats if necessary\n            if (pb_single === -2 || isFaster(new_time, pb_single)) {\n                current_event_doc.set(\n                    {\n                        stats: {\n                            pb_single: new_time,\n                            pb_single_loc: \"bucket\",\n                        },\n                    },\n                    { merge: true }\n                );\n            }\n\n            // add the new time to the db\n            current_event_doc.set(\n                {\n                    bucket: bucket_json,\n                },\n                { merge: true }\n            );\n        }\n    }\n\n    private toggle_last_penalty(pen: Penalty) {\n        if (this.state.user === null) {\n            alert(\"Error (toggle_last_penalty): User is null\");\n        } else {\n            const old_bucket = this.state.bucket.slice();\n            const old_time = old_bucket.pop();\n\n            // there must be a previous solve to penalize\n            if (old_time === undefined) {\n                console.error(\"Tried to toggle penalty with no previous solve\");\n                return;\n            }\n\n            const old_pen = old_time!.pen;\n            const new_time =\n                pen === old_pen\n                    ? { raw: old_time!.raw, pen: undefined }\n                    : { raw: old_time!.raw, pen: pen };\n\n            const new_bucket = old_bucket.concat([new_time]);\n            const new_bucket_json = new_bucket.map(timeToJson);\n\n            // get a path to the db document for the current event\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n\n            current_event_doc\n                .set(\n                    {\n                        bucket: new_bucket_json,\n                    },\n                    { merge: true }\n                )\n                .then(() => {\n                    this.recompute_pb_single(new_bucket);\n                });\n        }\n    }\n\n    // compute the pb single over the history of averages and the bucket passed in\n    private recompute_pb_single(bucket: Time[]) {\n        if (this.state.user === null) {\n            alert(\"Error (recompute_pb_single): User is null\");\n        } else {\n            // find the best single currently in the bucket\n            let best_in_bucket = -2; // recall -2 means \"no pb single exists\"\n            if (bucket.length !== 0) {\n                best_in_bucket = -1;\n                for (let t of bucket.map(timeToRaw)) {\n                    if (isFaster(t, best_in_bucket)) {\n                        best_in_bucket = t;\n                    }\n                }\n            }\n\n            // find the best single in any stored average\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n            current_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"best\", \"asc\")\n                .limit(1)\n                .get()\n                .then(snap => {\n                    if (snap.docs.length === 0) {\n                        // if there are no stored avgs, bucket pb wins\n                        current_event_doc.set(\n                            {\n                                stats: {\n                                    pb_single: best_in_bucket,\n                                    pb_single_loc: \"bucket\",\n                                },\n                            },\n                            { merge: true }\n                        );\n                    } else if (best_in_bucket === -2) {\n                        // if there are stored avgs and bucket pb doesn't exist, avg pb wins\n                        const containing_avg = snap.docs[0].data() as JsonAvg;\n                        const best_in_hist = containing_avg.best;\n\n                        current_event_doc.set(\n                            {\n                                stats: {\n                                    pb_single: best_in_hist,\n                                    pb_single_loc: snap.docs[0].id,\n                                },\n                            },\n                            { merge: true }\n                        );\n                    } else {\n                        // else, compare the best pb from an avg with bucket pb\n                        const containing_avg = snap.docs[0].data() as JsonAvg;\n                        const best_in_hist = containing_avg.best;\n\n                        current_event_doc.set(\n                            isFaster(best_in_bucket, best_in_hist)\n                                ? {\n                                      stats: {\n                                          pb_single: best_in_bucket,\n                                          pb_single_loc: \"bucket\",\n                                      },\n                                  }\n                                : {\n                                      stats: {\n                                          pb_single: best_in_hist,\n                                          pb_single_loc: snap.docs[0].id,\n                                      },\n                                  },\n                            { merge: true }\n                        );\n                    }\n                });\n        }\n    }\n\n    // compute the pb single over the history of averages and the bucket passed in\n    private recompute_pb_avg() {\n        if (this.state.user === null) {\n            alert(\"Error (recompute_pb_avg): User is null\");\n        } else {\n            // find the best stored average\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n            current_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"avg\", \"asc\")\n                .limit(1)\n                .get()\n                .then(snap => {\n                    if (snap.docs.length === 0) {\n                        // if there are no stored avgs, pb avg doesn't exist\n                        current_event_doc.set(\n                            {\n                                stats: {\n                                    pb_avg: null,\n                                    pb_avg_loc: null,\n                                },\n                            },\n                            { merge: true }\n                        );\n                    } else {\n                        // update the stats with the new best avg\n                        const new_pb_avg = snap.docs[0].data() as JsonAvg;\n                        current_event_doc.set(\n                            {\n                                stats: {\n                                    pb_avg: new_pb_avg.avg,\n                                    pb_avg_loc: snap.docs[0].id,\n                                },\n                            },\n                            { merge: true }\n                        );\n                    }\n                });\n        }\n    }\n\n    private delete_last_time() {\n        if (this.state.user === null) {\n            alert(\"Error (delete_last_time): User is null\");\n        } else {\n            // delete the most recent time\n            let new_bucket = this.state.bucket.slice();\n            const deleted_time = new_bucket.pop();\n\n            // get a path to the db document for the current event\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n\n            // update the bucket\n            current_event_doc.set(\n                {\n                    bucket: new_bucket.map(timeToJson),\n                },\n                { merge: true }\n            );\n\n            // recompute the pb single if we just deleted it\n            if (timeToRaw(deleted_time!) === this.state.stats.pb_single) {\n                this.recompute_pb_single(new_bucket);\n            }\n        }\n    }\n\n    private delete_avg(id: string) {\n        if (this.state.user === null) {\n            alert(\"Error (delete_avg): User is null\");\n        } else {\n            const hist_ref = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str)\n                .collection(\"Avgs\");\n            hist_ref\n                .doc(id)\n                .delete()\n                .then(() => {\n                    // recompute pb single if we just deleted it\n                    if (id === this.state.stats.pb_single_loc) {\n                        this.recompute_pb_single(this.state.bucket);\n                    }\n                    // recompute pb avg if we just deleted it\n                    if (id === this.state.stats.pb_avg_loc) {\n                        this.recompute_pb_avg();\n                    }\n                });\n        }\n    }\n\n    private handleTouchStart(event: TouchEvent) {\n        this.setState((state, props) => {\n            let nextstate: Model;\n            switch (state.phase.name) {\n                case \"inspecting\":\n                    nextstate = {\n                        ...state,\n                        phase: { name: \"red\", timeTurnedRed: Date.now() },\n                    };\n                    break;\n\n                case \"running\":\n                    let timetosave = {\n                        // convert to centiseconds\n                        raw: Math.floor(state.elapsed / 10),\n                        pen: state.penalty,\n                    };\n\n                    nextstate = {\n                        ...state,\n                        phase: { name: \"stopped\" },\n                        scramble: getScramble(state.current_event.scramble_str),\n                    };\n\n                    this.saveTimeToDB(timetosave);\n                    break;\n\n                default:\n                    nextstate = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextstate;\n        });\n    }\n\n    private handleTouchEnd(event: TouchEvent) {\n        this.setState((state, props) => {\n            let nextState: Model;\n            switch (state.phase.name) {\n                case \"waiting\":\n                    if (\n                        event.target === document.getElementById(\"timer_main\") ||\n                        event.target === document.getElementById(\"timer_text\")\n                    ) {\n                        nextState = {\n                            ...state,\n                            startTime: Date.now(),\n                            phase: { name: \"inspecting\" },\n                        };\n                    } else {\n                        nextState = state;\n                    }\n                    break;\n                case \"red\":\n                    nextState = {\n                        ...state,\n                        phase: { name: \"inspecting\" },\n                    };\n                    break;\n                case \"green\":\n                    // start the solve phase\n                    nextState = {\n                        ...state,\n                        startTime: Date.now(),\n                        elapsed: 0,\n                        phase: { name: \"running\" },\n                    };\n                    break;\n                case \"stopped\":\n                    nextState = {\n                        ...state,\n                        phase: { name: \"waiting\" },\n                    };\n                    break;\n                default:\n                    nextState = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextState;\n        });\n    }\n\n    private handleKeyDown(event: KeyboardEvent) {\n        this.setState((state, props) => {\n            let nextState: Model;\n            switch (state.phase.name) {\n                case \"inspecting\":\n                    nextState =\n                        event.code === \"Space\" // only spacebar should ready the timer\n                            ? {\n                                  ...state,\n                                  phase: { name: \"red\", timeTurnedRed: Date.now() },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n\n                case \"running\":\n                    let timeToSave = {\n                        // convert to centiseconds\n                        raw: Math.floor(state.elapsed / 10),\n                        pen: state.penalty,\n                    };\n\n                    nextState = {\n                        ...state,\n                        phase: { name: \"stopped\" },\n                        scramble: getScramble(state.current_event.scramble_str),\n                    };\n\n                    this.saveTimeToDB(timeToSave);\n                    break;\n\n                default:\n                    nextState = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextState;\n        });\n    }\n\n    private handleKeyUp(event: KeyboardEvent) {\n        this.setState((state, props) => {\n            let nextState: Model;\n            switch (state.phase.name) {\n                case \"waiting\":\n                    // only spacebar should start inspection\n                    nextState =\n                        event.code === \"Space\"\n                            ? {\n                                  ...state,\n                                  startTime: Date.now(),\n                                  phase: { name: \"inspecting\" },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n                case \"red\":\n                    // only lifting spacebar should return to inspection\n                    nextState =\n                        event.code === \"Space\"\n                            ? {\n                                  ...state,\n                                  phase: { name: \"inspecting\" },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n                case \"green\":\n                    // start the solve phase\n                    nextState =\n                        event.code === \"Space\" // only spacebar should start the timer\n                            ? {\n                                  ...state,\n                                  startTime: Date.now(),\n                                  elapsed: 0,\n                                  phase: { name: \"running\" },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n                case \"stopped\":\n                    nextState = {\n                        ...state,\n                        phase: { name: \"waiting\" },\n                    };\n                    break;\n                default:\n                    nextState = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextState;\n        });\n    }\n\n    private tick() {\n        this.setState((state, props) => {\n            let nextState: Model;\n\n            switch (state.phase.name) {\n                case \"red\":\n                    if (timeSince(state.phase.timeTurnedRed) >= 550) {\n                        nextState = {\n                            ...state,\n                            elapsed: timeSince(state.startTime),\n                            phase: { name: \"green\" },\n                            penalty: inspPenalty(state.elapsed),\n                        };\n                    } else {\n                        nextState = {\n                            ...state,\n                            elapsed: timeSince(state.startTime),\n                            penalty: inspPenalty(state.elapsed),\n                        };\n                    }\n                    break;\n                case \"inspecting\":\n                    nextState = {\n                        ...state,\n                        elapsed: timeSince(state.startTime),\n                        penalty: inspPenalty(state.elapsed),\n                    };\n                    break;\n                case \"green\":\n                    nextState = {\n                        ...state,\n                        elapsed: timeSince(state.startTime),\n                        penalty: inspPenalty(state.elapsed),\n                    };\n                    break;\n                case \"running\":\n                    nextState = {\n                        ...state,\n                        elapsed: timeSince(state.startTime),\n                    };\n                    break;\n                default:\n                    nextState = state;\n                    break;\n            }\n            return nextState;\n        });\n    }\n\n    private changeEvent(selected: Event | Event[] | null | undefined) {\n        if (selected && !(selected instanceof Array)) {\n            this.setState({\n                current_event: selected,\n            });\n            this.subscribe_to_event(selected);\n        } else {\n            console.log(\"Invalid input to event select handler.\");\n        }\n    }\n\n    private changeWCAId(e: React.FormEvent<HTMLFormElement>, new_id: string): void {\n        this.setState({ wca_id: new_id });\n        e.preventDefault();\n    }\n\n    // all times from history and bucket, from least to most recent\n    private all_times_raw_array(): number[] {\n        // TODO: check for sorting bugs\n        const bucket_times = this.state.bucket.map(t => timeToRaw(t));\n        const compare_by_timestamp = (avg1: JsonAvg, avg2: JsonAvg) => {\n            const d1 = avg1.timestamp.toDate();\n            const d2 = avg2.timestamp.toDate();\n            if (d1 < d2) {\n                return 1;\n            } else if (d1 > d2) {\n                return -1;\n            } else {\n                return 0;\n            }\n        };\n\n        const hist_times = Object.values(this.state.history)\n            .sort(compare_by_timestamp)\n            .flatMap(avg => avg.times);\n\n        return hist_times.concat(bucket_times);\n    }\n\n    private inspect_avg(avg_id: string) {\n        this.setState({\n            inspect_avg: avg_id,\n        });\n    }\n\n    private uninspect_avg() {\n        this.setState({\n            inspect_avg: undefined,\n        });\n    }\n\n    private handleWindowSizeChange() {\n        this.setState({\n            window_width: window.innerWidth,\n        });\n    }\n\n    public render() {\n        const is_mobile = this.state.window_width <= 500;\n        if (!is_mobile) {\n            return (\n                <section className=\"flex items-start justify-between w-100 overflow-hidden vh-100\">\n                    <div className=\"flex flex-column vh-100 justify-between w-25 outline\">\n                        <div className=\"outline\">\n                            <EventPicker\n                                onChange={this.changeEvent}\n                                isDisabled={this.state.phase.name !== \"waiting\"}\n                            />\n                            <StatsCard\n                                event={this.state.current_event}\n                                stats={this.state.stats}\n                                inspect_func={this.inspect_avg}\n                            />\n                        </div>\n                        <ScoreCard\n                            times={this.state.bucket}\n                            edit_fn={this.toggle_last_penalty}\n                            delete_fn={this.delete_last_time}\n                            avg_size={this.state.current_event.avg_size}\n                        />\n                        <HistoryCard\n                            hist={this.state.history}\n                            load_more_func={this.loadMoreHistory}\n                            inspect_func={this.inspect_avg}\n                        />\n                    </div>\n\n                    <div className=\"flex flex-column justify-between vh-100 w-50 outline\">\n                        {this.state.inspect_avg === undefined ? (\n                            <React.Fragment>\n                                <ScrambleText\n                                    scramble={this.state.scramble}\n                                    event={this.state.current_event}\n                                />\n                                <TimerDisplay\n                                    ms={this.state.elapsed}\n                                    phase={this.state.phase}\n                                    pen={this.state.penalty}\n                                />\n                                <div>\n                                    <WCACard\n                                        event={this.state.current_event}\n                                        wca_id={this.state.wca_id}\n                                        home_times={this.all_times_raw_array()}\n                                    />\n                                </div>\n                            </React.Fragment>\n                        ) : (\n                            <React.Fragment>\n                                <HistoryDetail\n                                    avg_id={this.state.inspect_avg}\n                                    avg_json={this.state.history[this.state.inspect_avg]}\n                                    delete_func={this.delete_avg}\n                                    close_func={this.uninspect_avg}\n                                />\n                            </React.Fragment>\n                        )}\n                    </div>\n\n                    <div className=\"flex flex-column-reverse vh-100 justify-between w-25 outline\">\n                        <div>\n                            <SettingsCard\n                                wca_id={this.state.wca_id}\n                                id_change_handler={this.changeWCAId}\n                            />\n                            <SignInForm user={this.state.user} />\n                        </div>\n                    </div>\n                </section>\n            );\n        } else {\n            // mobile UI\n            return (\n                <section className=\"flex flex-column justify-between w-100 vh-100\">\n                    <div className=\"w-100 outline\">\n                        <EventPicker\n                            onChange={this.changeEvent}\n                            isDisabled={this.state.phase.name !== \"waiting\"}\n                        />\n                        <ScrambleText\n                            scramble={this.state.scramble}\n                            event={this.state.current_event}\n                        />\n                    </div>\n\n                    <div id=\"timer_main\" className=\"vh-100 noselect\">\n                        <TimerDisplay\n                            ms={this.state.elapsed}\n                            phase={this.state.phase}\n                            pen={this.state.penalty}\n                        />\n                    </div>\n\n                    <div className=\"w-100 outline\">\n                        <ScoreCard\n                            times={this.state.bucket}\n                            edit_fn={this.toggle_last_penalty}\n                            delete_fn={this.delete_last_time}\n                            avg_size={this.state.current_event.avg_size}\n                        />\n                        {/*                        <HistoryCard\n                            hist={{  }}\n                            load_more_func={this.loadMoreHistory}\n                            inspect_func={this.inspect_avg}\n                        />\n*/}{\" \"}\n                        <SignInForm user={this.state.user} />\n                    </div>\n                </section>\n            );\n        }\n    }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as firebase from \"firebase/app\";\nimport Timer from \"./Timer\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDwiz-hIBeojGWqnk6rE7Ao3b7LS9-Wg6g\",\n  authDomain: \"timer-v0.firebaseapp.com\",\n  databaseURL: \"https://timer-v0.firebaseio.com\",\n  projectId: \"timer-v0\",\n  storageBucket: \"timer-v0.appspot.com\",\n  messagingSenderId: \"998055254824\",\n  appId: \"1:998055254824:web:3149843957307226\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<Timer />, document.getElementById(\"root\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}