{"version":3,"sources":["serviceWorker.tsx","Types.tsx","Util.tsx","ScrambleText.tsx","ScoreCard.tsx","StatsCard.tsx","TimerDisplay.tsx","HistoryCard.tsx","HistoryDetail.tsx","EventPicker.tsx","SignInForm.tsx","WCACard.tsx","SettingsCard.tsx","Timer.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Penalty","timeSince","t","Date","now","rawTimeToString","time","h","Math","floor","pow","m","s","timeString","n","console","assert","result","padCs","timeToString","time_string","raw","pen","DNF","PlusTwo","timeToJson","timeFromJson","t_json","pen_str","timeToRaw","isFaster","t1","t2","t1_is_dnf","t2_is_dnf","compareTimes","ScrambleText","this","props","event","scramble_str","react","id","className","style","whiteSpace","scramble","React","ScoreCard","_this","edit_ctrls","onClick","edit_fn","delete_fn","rows","num_times","times","length","i","key","avg_size","push","StatsCard","stats","pb_single","inspect_func","pb_single_loc","pb_avg","pb_avg_loc","inspPenalty","undefined","msToString","padMs","TimerDisplay","ms","colorClass","phase","name","toString","msPenToString","HistoryCard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hist","avg_lis","_loop","avg","map","join","hist_to_list_items","load_more_func","HistoryDetail","avg_json","delete_func","avg_id","close_func","EventPicker","eventOptions","wca_db_str","react_select_esm","onChange","isDisabled","defaultValue","options","theme","objectSpread","borderRadius","colors","primary25","primary","getOptionLabel","_ref","openMenuOnFocus","blurInputOnSelect","styles","menuList","base","maxHeight","isOptionSelected","selOpt","selOptArr","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","signInFlow","signInSuccessUrl","signInOptions","firebase","GoogleAuthProvider","PROVIDER_ID","tosUrl","privacyPolicyUrl","SignInForm","user","displayName","signOut","StyledFirebaseAuth_default","a","firebaseAuth","WCACard","state","single_or_avg","wca_pb","_this2","maybe_get_wca_pb","bind","fetch","wca_id","then","response","json","person_json","prevProps","_this3","which_kind","event_str","hasOwnProperty","setState","_this4","home_times","y_vals","data","x","y","victory_group","height","padding","top","bottom","left","right","victory_area","y0","fill","victory_line","domain","stroke","strokeWidth","strokeDasharray","victory_axis","dependentAxis","crossAxis","tickFormat","SettingsCard","updateFormContent","assertThisInitialized","submitWCAId","e","target","value","id_change_handler","onSubmit","type","Timer","intervalID","db","unsub_auth","onAuthStateChanged","collection","doc","uid","get","snap","subscribe_to_event","current_event","startTime","elapsed","penalty","bucket","scramble_img","__html","history","cur_event_listeners","auth_listener","handleKeyDown","handleKeyUp","changeEvent","changeWCAId","loadMoreHistory","toggle_last_penalty","delete_last_time","delete_avg","inspect_avg","uninspect_avg","setInterval","tick","document","addEventListener","clearInterval","removeEventListener","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","unsub_func","err","return","getScramble","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","target_event_doc","unsub_history","orderBy","limit","onSnapshot","avgs","docs","doc_ids","new_hist","forEach","last_hist_doc","unsub_bucket","bucket_times","saved","startAfter","new_avgs","new_keys","assign","alert","bucket_is_full","bucket_json","concat","current_event_doc","new_time","sorted_raws","slice","sort","num_solves","best","worst","timestamp","Timestamp","bucketToJsonAvg","add","avg_doc_ref","set","merge","_this5","old_bucket","old_time","pop","error","new_bucket","new_bucket_json","recompute_pb_single","best_in_bucket","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","best_in_hist","new_pb_avg","deleted_time","_this6","delete","recompute_pb_avg","_this7","nextState","code","timeTurnedRed","timeToSave","saveTimeToDB","selected","Array","log","new_id","preventDefault","values","avg1","avg2","d1","toDate","d2","flatMap","src_EventPicker","src_StatsCard","src_HistoryCard","src_ScrambleText","TimerDisplay_TimerDisplay","src_ScoreCard","src_WCACard","all_times_raw_array","src_HistoryDetail","dangerouslySetInnerHTML","src_SettingsCard","src_SignInForm","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","react_default","createElement","src_Timer","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64d35507.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nexport interface Time {\n    raw: number;\n    pen?: Penalty;\n}\n\nexport enum Penalty {\n    DNF,\n    PlusTwo,\n}\n\nexport type PenString = \"dnf\" | \"plus\" | \"\";\n\nexport interface JsonTime {\n    raw: number,\n    pen: PenString,\n}\n\nexport interface JsonAvg {\n    best: number;\n    worst: number;\n    times: number[];\n    avg: number;\n    timestamp: firebase.firestore.Timestamp;\n}\n\nexport interface StatsRecord {\n    pb_single: number;\n    pb_single_loc: string; // a doc id, \"bucket\", or \"\"\n    pb_avg: number | null;\n    pb_avg_loc: string | null;\n}\n\nexport type TimerPhase =\n    | { name: \"waiting\" }\n    | { name: \"inspecting\" }\n    | { name: \"green\" }\n    | { name: \"red\"; timeTurnedRed: number }\n    | { name: \"running\" }\n    | { name: \"stopped\" };\n\nexport interface Event {\n    name: string;\n    avg_size: number;\n    scramble_str: string;\n    wca_db_str: string;\n}\n\nexport type WhichScramble = 0 | 1;\n","import { Time, Penalty, PenString, JsonTime, JsonAvg } from \"./Types\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\n// return the elapsed time since t\nfunction timeSince(t: number): number {\n    return Date.now() - t;\n}\n\n// helper function for rawTimeToString\n// pad a centisecond value with zeros until it's two digits\nfunction padCs(n: number): string {\n    console.assert(n >= 0 && n < 100, \"Invalid argument to padCs() (\" + n + \")\");\n\n    let result: string = \"\";\n\n    if (n < 10) {\n        result = result + \"0\" + n;\n    } else if (n < 100) {\n        result = result + n;\n    }\n\n    return result;\n}\n\n// pretty-print a centisecond value as a time in h:m:s.dc format\nfunction rawTimeToString(time: number): string {\n    if (time === -1) {\n        return \"DNF\";\n    }\n\n    // Get the h:m:s.dc components of the time\n    let h = Math.floor((time % (100 * 60 ** 3)) / (100 * 60 ** 2));\n    let m = Math.floor((time % (100 * 60 ** 2)) / (100 * 60));\n    let s = Math.floor((time % (100 * 60)) / 100);\n    let dc = Math.floor(time % 100);\n\n    let timeString: string = \"\";\n\n    if (h !== 0) {\n        timeString = timeString + h + \":\";\n    }\n    if (h !== 0 && m < 10) {\n        timeString = timeString + \"0\";\n    }\n    if (m !== 0) {\n        timeString = timeString + m + \":\";\n    }\n    if (m !== 0 && s < 10) {\n        timeString = timeString + \"0\";\n    }\n\n    timeString = timeString + s + \".\" + padCs(dc);\n\n    return timeString;\n}\n\n// print a Time value, including penalties\nfunction timeToString(t: Time): string {\n    let time_string = rawTimeToString(t.raw);\n    if (t.pen === Penalty.DNF) {\n        return \"DNF (\" + time_string + \")\";\n    } else if (t.pen === Penalty.PlusTwo) {\n        return time_string + \" + 2 = \" + rawTimeToString(t.raw + 200);\n    } else {\n        return time_string;\n    }\n}\n\n// print a string penalty code (for backend use)\nfunction penToString(pen: Penalty | undefined): PenString {\n    if (pen === Penalty.DNF) {\n        return \"dnf\";\n    } else if (pen === Penalty.PlusTwo) {\n        return \"plus\";\n    } else {\n        return \"\";\n    }\n}\n\n// convert penalty codes to Penalty values\nfunction penFromString(pen_str: PenString): Penalty | undefined {\n    if (pen_str === \"dnf\") {\n        return Penalty.DNF;\n    } else if (pen_str === \"plus\") {\n        return Penalty.PlusTwo;\n    } else {\n        return undefined;\n    }\n}\n\nfunction timeToJson(t: Time): JsonTime {\n    return {\n        raw: t.raw,\n        pen: penToString(t.pen),\n    }\n}\n\nfunction timeFromJson(t_json: JsonTime): Time {\n    return {\n        raw: t_json.raw,\n        pen: penFromString(t_json.pen),\n    }\n}\n\n// convert a Time object to centiseconds (-1 = DNF)\nfunction timeToRaw(t: Time): number {\n    if (t.pen === Penalty.DNF) {\n        return -1;\n    } else if (t.pen === Penalty.PlusTwo) {\n        return t.raw + 200;\n    } else {\n        return t.raw;\n    }\n}\n\n// returns true if t1 is faster than t2\n// ties return false\nfunction isFaster(t1: number, t2: number) {\n    const t1_is_dnf = t1 === -1;\n    const t2_is_dnf = t2 === -1;\n\n    if (t1_is_dnf && !t2_is_dnf) {\n        return false;\n    } else if (!t1_is_dnf && t2_is_dnf) {\n        return true;\n    } else if (t1_is_dnf && t2_is_dnf) {\n        return false;\n    } else {\n        return t1 < t2;\n    }\n}\n\n// returns negative if t1 is faster than t2, positive if slower, 0 if equal\nfunction compareTimes(t1: Time, t2: Time): number {\n    const t1_is_dnf = t1.pen === Penalty.DNF;\n    const t2_is_dnf = t2.pen === Penalty.DNF;\n\n    if (t1_is_dnf && !t2_is_dnf) {\n        return 1;\n    } else if (!t1_is_dnf && t2_is_dnf) {\n        return -1;\n    } else if (t1_is_dnf && t2_is_dnf) {\n        return 0;\n    } else {\n        const t1_raw = timeToRaw(t1);\n        const t2_raw = timeToRaw(t2);\n        return t1_raw - t2_raw;\n    }\n}\n\n// map a bucket of times to a Json object for storage\nfunction bucketToJsonAvg(bucket: Time[]): JsonAvg {\n    const sorted_raws = bucket.slice(0).sort(compareTimes).map(timeToRaw);\n\n    const num_solves = sorted_raws.length;\n    console.assert(num_solves === 5 || num_solves === 3);\n    const best = sorted_raws[0];\n    const worst = sorted_raws[num_solves - 1];\n\n    let avg = -1;\n\n    if (num_solves === 5 && sorted_raws[3] !== -1) {\n        avg = (sorted_raws[1] + sorted_raws[2] + sorted_raws[3]) / 3;\n    } else if (num_solves === 3 && sorted_raws[2] !== -1) {\n        avg = (sorted_raws[0] + sorted_raws[1] + sorted_raws[2]) / 3;\n    }\n\n    return {\n        times: bucket.map(timeToRaw),\n        best: best,\n        worst: worst,\n        avg: Math.floor(avg),\n        timestamp: firebase.firestore.Timestamp.now(),\n    }\n}\n\nexport {\n    rawTimeToString,\n    timeToString,\n    timeSince,\n    penToString,\n    timeToJson,\n    timeToRaw,\n    timeFromJson,\n    bucketToJsonAvg,\n    isFaster,\n    compareTimes,\n};\n","import * as React from \"react\";\nimport { Event } from \"./Types\";\n\ninterface Props {\n    scramble: string,\n    event: Event,\n}\nclass ScrambleText extends React.PureComponent<Props, {}> {\n    public render() {\n        return (\n            this.props.event.scramble_str === \"minx\" ? \n                <div id=\"scramble_area\" className=\"f3 tc\" style={{whiteSpace: \"pre-wrap\"}}>\n                    {this.props.scramble}\n                </div> :\n                <div id=\"scramble_area\" className=\"f3 tc\">\n                    {this.props.scramble}\n                </div>\n        );\n    }\n}\n\nexport default ScrambleText;\n","import * as React from \"react\";\nimport { timeToString } from \"./Util\";\nimport { Time, Penalty } from \"./Types\";\n\n\ninterface Props {\n    times: Time[];\n    edit_fn: (arg0: Penalty) => void;\n    delete_fn: () => void;\n    avg_size: number;\n}\n\nclass ScoreCard extends React.PureComponent<Props, {}> {\n    public render() {\n        const edit_ctrls = <span className=\"fr\">\n                               <a className=\"link dim br1 bt bb bl ph1 dib black pointer\"\n                                  onClick={() => this.props.edit_fn(Penalty.PlusTwo)}>+2\n                               </a>\n                               <a className=\"link dim br1 ba ph1 dib black pointer\"\n                                  onClick={() => this.props.edit_fn(Penalty.DNF)}>DNF\n                               </a>\n                               <a className=\"link dim br1 bt bb br ph1 dib black pointer\"\n                                  onClick={() => this.props.delete_fn()}>×\n                               </a>\n                           </span>;\n\n        // build array of scorecard rows\n        let rows = [];\n        const num_times = this.props.times.length;\n\n        for (let i = 0; i < num_times; i++) {\n            let t = this.props.times[i];\n            rows[i] = (\n                <li key={i} className=\"ph2 pv2 bb b--light-silver\">\n                    {timeToString(t)}\n                    {i === num_times - 1 ? edit_ctrls : \"\"}\n                </li>\n            );\n        }\n\n        while (rows.length < this.props.avg_size) {\n            rows.push(\n                <li key={rows.length} className=\"ph2 pv2 bb b--light-silver\">\n                    &nbsp;\n                </li>\n            );\n        }\n\n        return (\n            <div className=\"outline\">\n                <h1 className=\"f5 center mw5\">Current Average</h1>\n                <ul className=\"list pl0 ml0 center mw5 ba b--light-silver br1\">{rows}</ul>\n            </div>\n        );\n    }\n}\n\nexport default ScoreCard;\n","import * as React from \"react\";\nimport { Event, JsonAvg, StatsRecord } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\n\ninterface Props {\n    event: Event;\n    stats: StatsRecord;\n    inspect_func: (id: string) => void;\n}\n\nclass StatsCard extends React.PureComponent<Props, {}> {\n    public render() {\n        const avg_size_str = this.props.event.avg_size === 5 ? \"Ao5\" : \"Mo3\";\n        return (\n            <div className=\"outline\">\n                <dl className=\"lh-title ml3\">\n                    <dt className=\"f6 b\">Best Single</dt>\n                    {\n                        this.props.stats.pb_single === -2\n                            ? <dd className=\"ml0\">N/A</dd>\n                            : <dd className=\"ml0\">\n                              <span className=\"pointer bg-animate bg-white hover-bg-light-silver\"\n                                    onClick={() =>\n                                        this.props.inspect_func(this.props.stats.pb_single_loc)\n                                    }\n                              >\n                                {rawTimeToString(this.props.stats.pb_single)}\n                              </span>\n                              </dd>\n                    }\n                    <dt className=\"f6 b\">Best Avg.</dt>\n                    {\n                        (this.props.stats.pb_avg === null || this.props.stats.pb_avg_loc === null)\n                            ? <dd className=\"ml0\">N/A</dd>\n                            : <dd className=\"ml0\">\n                              <span className=\"pointer bg-animate bg-white hover-bg-light-silver\"\n                                    onClick={() =>\n                                        this.props.inspect_func(this.props.stats.pb_avg_loc!)\n                                    }\n                              >\n                                {rawTimeToString(this.props.stats.pb_avg)}\n                              </span>\n                              </dd>\n                    }\n                </dl>\n            </div>\n        );\n    }\n}\n\nexport default StatsCard;\n","import * as React from \"react\";\nimport { Penalty, TimerPhase } from \"./Types\";\n\n// The timer display is the only component that operates at millisecond precision,\n// so all the millisecond-related helper functions are in here.\n// Times are truncated to centiseconds as soon as they are stored in the bucket.\n// Any ms value outside this file (or its wiring in Timer.tsx) probably indicates a bug.\n\n// returns the penalty incurred by an inspection time\nfunction inspPenalty(time: number): Penalty | undefined {\n    let pen = undefined;\n    if (time >= 17000) {\n        pen = Penalty.DNF;\n    } else if (time >= 15000) {\n        pen = Penalty.PlusTwo;\n    }\n    return pen;\n}\n\n\n// pretty-print an ms value as an inspection time\nfunction msToInspString(ms: number): string {\n    if (ms >= 17000) {\n        return \"DNF\";\n    } else if (ms >= 15000) {\n        return \"+2\";\n    }\n\n    let s = Math.floor((ms % (1000 * 60)) / 1000);\n    return (15 - s).toString();\n}\n\n// helper function for msToString\n// pad a ms value with zeros until it's three digits\nfunction padMs(n: number): string {\n    console.assert(n >= 0 && n < 1000, \"Invalid argument to padMs() (\" + n + \")\");\n\n    let result: string = \"\";\n\n    if (n < 10) {\n        result = result + \"00\" + n;\n    } else if (n < 100) {\n        result = result + \"0\" + n;\n    } else if (n < 1000) {\n        result = result + n;\n    }\n\n    return result;\n}\n\n// pretty-print a ms value as a time in h:m:s.dcm format\nfunction msToString(time: number): string {\n    // Get the h:m:s.dcm components of the time\n    let h = Math.floor((time % (1000 * 60 ** 3)) / (1000 * 60 ** 2));\n    let m = Math.floor((time % (1000 * 60 ** 2)) / (1000 * 60));\n    let s = Math.floor((time % (1000 * 60)) / 1000);\n    let dcm = Math.floor(time % 1000);\n\n    let timeString: string = \"\";\n\n    if (h !== 0) {\n        timeString = timeString + h + \":\";\n    }\n    if (h !== 0 && m < 10) {\n        timeString = timeString + \"0\";\n    }\n    if (m !== 0) {\n        timeString = timeString + m + \":\";\n    }\n    if (m !== 0 && s < 10) {\n        timeString = timeString + \"0\";\n    }\n\n    timeString = timeString + s + \".\" + padMs(dcm);\n\n    return timeString;\n}\n\nfunction msPenToString(ms: number, pen: Penalty) {\n    let time_string = msToString(ms);\n    if (pen === Penalty.DNF) {\n        return \"DNF (\" + time_string + \")\";\n    } else if (pen === Penalty.PlusTwo) {\n        return time_string + \" + 2 = \" + msToString(ms + 200);\n    } else {\n        return time_string;\n    }\n}\n\ninterface Props {\n    ms: number;\n    phase: TimerPhase;\n    pen: Penalty | undefined;\n}\n\nclass TimerDisplay extends React.Component<Props, {}> {\n\n    public render() {\n        // Set the color of the timer\n        let colorClass = \"black\";\n        if (this.props.phase.name === \"red\") {\n            colorClass = \"red\";\n        } else if (this.props.phase.name === \"green\") {\n            colorClass = \"green\";\n        }\n\n        // Pretty-print the timer readout\n        let timeString: string;\n        if (\n            this.props.phase.name === \"inspecting\" ||\n            this.props.phase.name === \"red\" ||\n            this.props.phase.name === \"green\"\n        ) {\n            timeString = msToInspString(this.props.ms);\n        } else if (\n            (this.props.phase.name === \"stopped\" || this.props.phase.name === \"waiting\") &&\n            this.props.pen !== undefined\n        ) {\n            timeString = msPenToString(this.props.ms, this.props.pen);\n        } else {\n            timeString = msToString(this.props.ms);\n        }\n        return <div className={\"tc f1 code outline \" + colorClass}>{timeString}</div>;\n    }\n}\n\n// export default TimerDisplay;\nexport {\n    inspPenalty,\n    TimerDisplay,\n}\n","import * as React from \"react\";\nimport { Time, JsonAvg } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\n\n\ninterface Props {\n    hist: {[id: string]: JsonAvg};\n    load_more_func: any;\n    inspect_func: (id: string) => void;\n}\n\nclass HistoryCard extends React.PureComponent<Props, {}> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    private hist_to_list_items(hist: {[id: string]: JsonAvg}): JSX.Element[] {\n        let avg_lis = [];\n\n        for (let id in hist) {\n            avg_lis.push(\n                <li key={id}\n                    className=\"bg-animate bg-white hover-bg-light-silver pointer\"\n                    onClick={() => this.props.inspect_func(id)}\n                >\n                    <b className=\"pt1\">{rawTimeToString(hist[id].avg)}</b>\n                    <div>{hist[id].times.map(rawTimeToString).join(\" \")}</div>\n                </li>\n            );\n        }\n\n        return avg_lis;\n    }\n\n    public render() {\n        return (\n            <div className=\"overflow-auto\">\n                <ul className=\"list pl0 mv0\">\n                    {\n                        this.hist_to_list_items(this.props.hist)\n                    }\n                </ul>\n                <div className=\"pv3 tc\">\n                    <a className=\"ba pointer ph1\" onClick={this.props.load_more_func}>Load more</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HistoryCard;\n","import * as React from \"react\";\nimport { Time, JsonAvg } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\ninterface Props {\n    avg_id: string;\n    avg_json: JsonAvg;\n    // scrambles_ref?: firebase.firestore.CollectionReference;\n    delete_func: (id: string) => void;\n    close_func: () => void;\n}\n\nclass HistoryDetail extends React.PureComponent<Props, {}> {\n    public render() {\n        return (\n            <div>\n                <h1 className=\"f4 bg-near-black white mv0 pv2 ph3\">Average detail</h1>\n                <div className=\"pa3 bt\">\n                  <p className=\"f6 f5-ns lh-copy measure mv0\">\n                  {rawTimeToString(this.props.avg_json.avg)}\n                  </p>\n                  <p className=\"f6 f5-ns lh-copy measure mv0\">\n                  {this.props.avg_json.times.map(rawTimeToString).join(\" \")}\n                  </p>\n                </div>\n                <div className=\"pv3 tc\">\n                    <a className=\"ba pointer ph1\"\n                       onClick={() => {\n                           this.props.delete_func(this.props.avg_id);\n                           this.props.close_func();\n                       }}\n                    >Delete Average</a>\n                </div>\n                <div className=\"pv3 tc\">\n                    <a className=\"ba pointer ph1\" onClick={this.props.close_func}>Close</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HistoryDetail;\n","import * as React from \"react\";\nimport Select from \"react-select\";\nimport { Event } from \"./Types\";\n\ninterface Props {\n        onChange: (selected?: Event | Event[] | null) => void;\n        isDisabled: boolean;\n}\n\nclass EventPicker extends React.PureComponent<Props, {}> {\n    private eventOptions = [\n      { name: \"2x2x2\",\n        avg_size: 5,\n        scramble_str: \"222\",\n        wca_db_str: \"222\",\n      },\n      { name: \"3x3x3\",\n        avg_size: 5,\n        scramble_str: \"333\",\n        wca_db_str: \"333\",\n      },\n      { name: \"4x4x4\",\n        avg_size: 5,\n        scramble_str: \"444fast\",\n        wca_db_str: \"444\",\n      },\n      { name: \"5x5x5\",\n        avg_size: 5,\n        scramble_str: \"555\",\n        wca_db_str: \"555\",\n      },\n      { name: \"6x6x6\",\n        avg_size: 3,\n        scramble_str: \"666\",\n        wca_db_str: \"666\",\n      },\n      { name: \"7x7x7\",\n        avg_size: 3,\n        scramble_str: \"777\",\n        wca_db_str: \"777\",\n      },\n      { name: \"3x3x3 OH\",\n        avg_size: 5,\n        scramble_str: \"333\",\n        wca_db_str: \"333oh\",\n      },\n      { name: \"3x3x3 BLD\",\n        avg_size: 3,\n        scramble_str: \"333\",\n        wca_db_str: \"333bf\",\n      },\n      { name: \"Pyraminx\",\n        avg_size: 5,\n        scramble_str: \"pyram\",\n        wca_db_str: \"pyram\",\n      },\n      { name: \"Megaminx\",\n        avg_size: 5,\n        scramble_str: \"minx\",\n        wca_db_str: \"minx\",\n      },\n      { name: \"Square-1\",\n        avg_size: 5,\n        scramble_str: \"sq1\",\n        wca_db_str: \"sq1\",\n      },\n      { name: \"Clock\",\n        avg_size: 5,\n        scramble_str: \"clock\",\n        wca_db_str: \"clock\",\n      },\n      { name: \"Skewb\",\n        avg_size: 5,\n        scramble_str: \"skewb\",\n        wca_db_str: \"skewb\",\n      }\n    ]\n\n    public render() {\n        const dropdownStyle = (base: any) => ({\n            // make the menu tall enough that all events are visible\n            maxHeight: 500,\n        });\n\n        return (\n            <React.Fragment>\n                <Select\n                    onChange={this.props.onChange}\n                    isDisabled={this.props.isDisabled}\n                    defaultValue={this.eventOptions[1]}\n                    options={this.eventOptions}\n                    theme={theme => ({\n                        ...theme,\n                        borderRadius: 0,\n                        colors: {\n                            ...theme.colors,\n                            primary25: \"gray\",\n                            primary: \"black\",\n                        },\n                    })}\n                    getOptionLabel={({ name }) => name}\n                    openMenuOnFocus={true}\n                    blurInputOnSelect={true}\n                    styles={{menuList: dropdownStyle}}\n                    // This looks like some wacky bug in react-select.\n                    // Without the following line, all menu options appear selected.\n                    // source: https://stackoverflow.com/questions/52000594/every-menu-option-rendered-as-selected-strange-workaround\n                    isOptionSelected={(selOpt, selOptArr) => false}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default EventPicker;\n","import * as React from \"react\";\nimport * as firebase from \"firebase/app\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport \"firebase/auth\";\n\nconst uiConfig = {\n  // autoUpgradeAnonymousUsers: true,\n  callbacks: {\n    signInSuccessWithAuthResult: function(authResult: firebase.auth.UserCredential, redirectUrl: string) {\n      // User successfully signed in.\n      // Return type determines whether we continue the redirect automatically\n      // or whether we leave that to developer to handle.\n      return false;\n    },\n    // signInFailure callback must be provided to handle merge conflicts which\n    // occur when an existing credential is linked to an anonymous user.\n    // signInFailure: function(error: firebaseui.auth.AuthUIError) {\n    //   // For merge conflicts, the error.code will be\n    //   // 'firebaseui/anonymous-upgrade-merge-conflict'.\n    //   if (error.code != 'firebaseui/anonymous-upgrade-merge-conflict') {\n    //     return Promise.resolve();\n    //   }\n\n    //   const sign_in_anyway = window.confirm(\"An account for that user already exists. Signing in will erase times saved in anonymous mode. Are you sure you want to sign in?\");\n\n    //   if (sign_in_anyway) {\n    //     // Delete the anonymous user\n    //     if (firebase.auth().currentUser !== null && firebase.auth().currentUser!.isAnonymous) {\n    //       firebase.auth().currentUser!.delete();\n    //     }\n    //     // The credential the user tried to sign in with.\n    //     var cred = error.credential;\n    //     // Finish sign-in.\n    //     // return firebase.auth().signInWithCredential(cred);\n    //     firebase.auth().signInWithCredential(cred);\n    //   }\n    //   return Promise.resolve();\n    // },\n  },\n  signInFlow: 'redirect',\n  signInSuccessUrl: '',\n  signInOptions: [\n    // Leave the lines as is for the providers you want to offer your users.\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    // firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    // firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n    // firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    // firebase.auth.PhoneAuthProvider.PROVIDER_ID\n  ],\n  // Terms of service url.\n  tosUrl: '<your-tos-url>',\n  // Privacy policy url.\n  privacyPolicyUrl: '<your-privacy-policy-url>'\n};\n\ninterface Props {\n  user: firebase.User | null;\n}\n\nclass SignInForm extends React.PureComponent<Props> {\n  render() {\n    if (!this.props.user) {\n      return (\n        <div className=\"outline\">\n          <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"outline\">\n          <p>Signed in as {this.props.user.displayName}</p>\n          <a className=\"ba pointer\" onClick={() => firebase.auth().signOut()}>Sign out</a>\n        </div>\n        )\n    }\n  }\n}\n\nexport default SignInForm;","import * as React from \"react\";\nimport { VictoryTheme, VictoryGroup, VictoryLine, VictoryArea, VictoryAxis } from \"victory\";\nimport { Event } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\n\ninterface Props {\n    event: Event;\n    wca_id: string;\n    home_times: number[];\n}\n\ntype result_kind = \"single\" | \"average\";\n\ninterface State {\n    single_or_avg: result_kind;\n    wca_pb?: number;\n}\n\nclass WCACard extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { single_or_avg: \"single\", wca_pb: undefined }\n    }\n\n    componentDidMount() {\n        const WCA_API_PREFIX = \"https://www.worldcubeassociation.org/api/v0/persons/\"\n\n        this.maybe_get_wca_pb= this.maybe_get_wca_pb.bind(this);\n\n        fetch(WCA_API_PREFIX + this.props.wca_id)\n          .then(function(response: Response) {\n            return response.json();\n          })\n          .then((person_json) => {\n            this.maybe_get_wca_pb(person_json, this.state.single_or_avg);\n          });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const WCA_API_PREFIX = \"https://www.worldcubeassociation.org/api/v0/persons/\"\n\n        if (this.props.event !== prevProps.event || this.props.wca_id !== prevProps.wca_id) {\n            fetch(WCA_API_PREFIX + this.props.wca_id)\n              .then(function(response: Response) {\n                return response.json();\n              })\n              .then((person_json) => {\n                this.maybe_get_wca_pb(person_json, this.state.single_or_avg);\n              });\n        }\n    }\n\n    // returns false if there are no official results for the event/kind pair\n    // otherwise, returns true and sets the state to reflect the WCA pb\n    private maybe_get_wca_pb(person_json: any, which_kind: result_kind): boolean {\n        const event_str = this.props.event.wca_db_str;\n\n        if (!person_json.hasOwnProperty(\"personal_records\")) {\n            this.setState({\n                wca_pb: undefined,\n            })\n\n            return false;\n        } else if (!person_json[\"personal_records\"].hasOwnProperty(event_str)) {\n            this.setState({\n                wca_pb: undefined,\n            })\n\n            return false;\n        } else if (!person_json[\"personal_records\"][event_str].hasOwnProperty(which_kind)) {\n            this.setState({\n                wca_pb: undefined,\n            })\n\n            return false;\n        } else {\n            this.setState({\n                wca_pb: person_json[\"personal_records\"][event_str][which_kind][\"best\"],\n            })\n\n            return true;\n        }\n    }\n\n    public render() {\n        if (this.state.wca_pb === undefined) {\n            return (\n                <div className=\"outline\">\n                    <p className=\"tc\">No WCA data available.</p>\n                </div>\n            );\n        } else if (this.props.home_times.length < this.props.event.avg_size) {\n            return (\n                <div className=\"outline\">\n                    <p className=\"tc\">Complete an average to see the performance graph.</p>\n                </div>\n            );\n        } else {\n            const y_vals = this.props.home_times;\n\n            let data = [];\n\n            for (let x = 0; x < y_vals.length; x++) {\n                if (y_vals[x] !== -1) {\n                    data.push({ x: x, y: y_vals[x] });\n                }\n            }\n\n            return (\n                <div className=\"outline\">\n                    <VictoryGroup\n                        height={120}\n                        padding={{ top: 20, bottom: 20, left: 80, right: 40 }}\n                    >\n                        <VictoryArea\n                            data={data}\n                            y0={() => this.state.wca_pb!}\n                            style={{\n                                data: {\n                                    fill: \"#cccccc\"\n                                } \n                            }}\n                        />\n                        <VictoryLine\n                            domain={{ x: [0, data.length + 1] }}\n                            style={{\n                                data: {\n                                    stroke: \"#AA0000\",\n                                    strokeWidth: 1,\n                                    strokeDasharray: \"4\",\n                                }\n                            }}\n                            y={() => this.state.wca_pb!}\n                        />\n                        <VictoryAxis dependentAxis crossAxis\n                            height={200}\n                            tickFormat={(t) => rawTimeToString(t)}\n                        />\n                    </VictoryGroup>\n                </div>\n            );\n        }\n    }\n}\n\nexport default WCACard;\n","import * as React from \"react\";\n\ninterface Props {\n    wca_id: string;\n    id_change_handler: (event: React.ChangeEvent<HTMLFormElement>, new_id: string) => void;\n}\n\ninterface State {\n    wca_id: string;\n}\n\nclass SettingsCard extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            wca_id: this.props.wca_id,\n        };\n\n        this.updateFormContent = this.updateFormContent.bind(this);\n        this.submitWCAId = this.submitWCAId.bind(this);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.wca_id !== prevProps.wca_id) {\n            this.setState({\n                wca_id: this.props.wca_id,\n            });\n        }\n    }\n    \n    private updateFormContent(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ wca_id: e.target.value });\n    }\n\n    private submitWCAId(e: React.ChangeEvent<HTMLFormElement>) {\n        this.props.id_change_handler(e, this.state.wca_id);\n    }\n\n    public render() {\n        return (\n            <div className=\"outline\">\n                <h1 className=\"\">Settings</h1>\n                <form className=\"pa1 black-80\" onSubmit={this.submitWCAId}>\n                  <div className=\"measure\">\n                    <label className=\"f6 b db mb2\">WCA ID</label>\n                    <input \n                        id=\"name\"\n                        className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n                        type=\"text\"\n                        onChange={this.updateFormContent}\n                        value={this.state.wca_id}\n                    />\n                    <input type=\"submit\" value=\"Set\" />\n                  </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default SettingsCard;\n","import * as React from \"react\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { timeSince,\n         timeToJson,\n         timeToRaw,\n         timeFromJson,\n         bucketToJsonAvg,\n         isFaster,\n         compareTimes,\n       } from \"./Util\";\nimport { Time, Penalty, JsonAvg, TimerPhase, WhichScramble, Event, StatsRecord } from \"./Types\";\nimport ScrambleText from \"./ScrambleText\";\nimport ScoreCard from \"./ScoreCard\";\nimport StatsCard from \"./StatsCard\";\nimport { inspPenalty, TimerDisplay } from \"./TimerDisplay\";\nimport HistoryCard from \"./HistoryCard\";\nimport HistoryDetail from \"./HistoryDetail\";\nimport EventPicker from \"./EventPicker\";\nimport SignInForm from \"./SignInForm\";\nimport WCACard from \"./WCACard\";\nimport SettingsCard from \"./SettingsCard\";\n\ninterface Model {\n    user: firebase.User | null;\n    wca_id: string;\n    startTime: number;\n    elapsed: number;\n    phase: TimerPhase;\n    penalty?: Penalty;\n    bucket: Time[];\n    scramble: string;\n    // scramble_img: React.SVGProps<SVGSVGElement>;\n    scramble_img: {\"__html\": string};\n    current_event: Event;\n    history: {[id: string]: JsonAvg};\n    last_hist_doc?: firebase.firestore.QueryDocumentSnapshot;\n    inspect_avg?: string;\n    cur_event_listeners: Function[];\n    auth_listener: firebase.Unsubscribe;\n    stats: StatsRecord;\n}\n\ndeclare var getScramble: any;\n\nclass Timer extends React.PureComponent<{}, Model> {\n    private intervalID: number;\n    private db = firebase.firestore();\n\n    constructor(props: {}) {\n        super(props);\n\n        const unsub_auth = firebase.auth().onAuthStateChanged(\n            (user) => {\n                // set the user in react state\n                this.setState({\n                    user: user,\n                });\n\n                // apply saved preferences, if they exist\n                if (user !== null) {\n                    this.db.collection(\"Users\").doc(user.uid)\n                        .get().then((snap) => {\n                            if (snap.data() !== undefined) {\n                                this.setState({\n                                    wca_id: snap.data()!.wca_id,\n                                }) \n                            }\n                        })\n                }\n\n                // subscribe to the initial event\n                this.subscribe_to_event(this.state.current_event);\n            }\n        );\n\n        this.state = {\n            user: null,\n            wca_id: \"\",\n            startTime: 0,\n            elapsed: 0,\n            phase: { name: \"waiting\" },\n            penalty: undefined,\n            bucket: [],\n            scramble: \"Loading scramble...\",\n            scramble_img: { __html: \"\" },\n            current_event: { name: \"3x3x3\",\n                             avg_size: 5,\n                             scramble_str: \"333\",\n                             wca_db_str: \"333\",\n                           },\n            history: {},\n            cur_event_listeners: [],\n            auth_listener: unsub_auth,\n            stats: {\n                pb_single: -2, \n                pb_single_loc: \"\",\n                pb_avg: null,\n                pb_avg_loc: null,\n            },\n        };\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.changeEvent = this.changeEvent.bind(this);\n        this.changeWCAId = this.changeWCAId.bind(this);\n        this.loadMoreHistory = this.loadMoreHistory.bind(this);\n        this.toggle_last_penalty = this.toggle_last_penalty.bind(this);\n        this.delete_last_time = this.delete_last_time.bind(this);\n        this.delete_avg = this.delete_avg.bind(this);\n        this.inspect_avg = this.inspect_avg.bind(this);\n        this.uninspect_avg = this.uninspect_avg.bind(this);\n\n        this.intervalID = 0;\n    }\n\n    public componentDidMount() {\n        this.intervalID = window.setInterval(() => this.tick(), 1);\n\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n        document.addEventListener(\"keyup\", this.handleKeyUp);\n    }\n\n    public componentWillUnmount() {\n\n        window.clearInterval(this.intervalID);\n\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n        document.removeEventListener(\"keyup\", this.handleKeyUp);\n\n        // stop listening to any firestore docs\n        for (var unsub_func of this.state.cur_event_listeners) {\n            unsub_func();\n        }\n\n        this.state.auth_listener();\n    }\n\n    private subscribe_to_event(e: Event) {\n        this.setState({\n            scramble: getScramble(e.scramble_str),\n        });\n\n        // unsub from previous event\n        for (var unsub_func of this.state.cur_event_listeners) {\n            unsub_func();\n        }\n\n        if (this.state.user === null) {\n            return\n        } else {\n            const target_event_doc = this.db.collection(\"Users\")\n                                             .doc(this.state.user.uid)\n                                             .collection(\"Events\")\n                                             .doc(e.wca_db_str);\n            \n            // Fetch event history\n            const unsub_history = target_event_doc.collection(\"Avgs\")\n                                                  .orderBy(\"timestamp\", \"desc\")\n                                                  .limit(25)\n                                                  .onSnapshot((snap) => {\n                const avgs = snap.docs.map((doc) => doc.data() as JsonAvg);\n                const doc_ids = snap.docs.map((doc) => doc.id);\n\n                let new_hist: {[id: string]: JsonAvg} = {};\n                doc_ids.forEach((id, i) => new_hist[id] = avgs[i]);\n\n                this.setState({\n                    history: new_hist,\n                    last_hist_doc: snap.docs[snap.docs.length - 1],\n                });\n            });\n\n            // Fetch current average\n            const unsub_bucket = target_event_doc.onSnapshot((snap) => {\n                let bucket_times = [];\n\n                if (snap.get(\"bucket\") !== undefined) {\n                    bucket_times = snap.get(\"bucket\").map(timeFromJson); \n                }\n\n                this.setState({\n                    bucket: bucket_times \n                });\n            });\n\n            this.setState((state, props) => {\n                return { ...state, cur_event_listeners: [unsub_bucket, unsub_history] };\n            })\n\n            // Fetch event stats\n            const unsub_stats = target_event_doc.onSnapshot((snap) => {\n                const saved = snap.get(\"stats\");\n                if (saved === undefined) {\n                    this.setState({\n                        stats: {\n                            pb_single: -2,\n                            pb_single_loc: \"\",\n                            pb_avg: null,\n                            pb_avg_loc: null,\n                        }\n                    })\n                } else {\n                    this.setState({\n                        stats: {\n                            pb_single: saved.pb_single === undefined ? -2 : saved.pb_single,\n                            pb_single_loc: saved.pb_single_loc === undefined ? \"\" : saved.pb_single_loc,\n                            pb_avg: saved.pb_avg === undefined ? null : saved.pb_avg,\n                            pb_avg_loc: saved.pb_avg_loc === undefined ? null : saved.pb_avg_loc,\n                        }\n                    })\n                }\n            })\n        }\n    }\n\n    private loadMoreHistory() {\n        if (this.state.user === null) {\n            alert(\"Error (loadMoreHistory): User is null\");\n            return\n        } else {\n            const target_event_doc = this.db.collection(\"Users\")\n                                            .doc(this.state.user.uid)\n                                            .collection(\"Events\")\n                                            .doc(this.state.current_event.wca_db_str);\n\n            target_event_doc.collection(\"Avgs\")\n                            .orderBy(\"timestamp\", \"desc\")\n                            .limit(25)\n                            .startAfter(this.state.last_hist_doc)\n                            .get()\n                            .then((snap) =>\n                {\n                    if (snap.docs.length === 0) {\n                        return;\n                    }\n                    \n                    const new_avgs = snap.docs.map((doc) => doc.data() as JsonAvg);\n                    const new_keys = snap.docs.map((doc) => doc.id);\n                    let new_hist: {[id: string]: JsonAvg} = {};\n                    new_keys.forEach((id, i) => new_hist[id] = new_avgs[i]);\n\n                    this.setState((state, props) => {\n                        return {\n                            history: Object.assign({}, state.history, new_hist),\n                            last_hist_doc: snap.docs[snap.docs.length - 1],\n                        }\n                    });\n                });\n\n        }\n    }\n\n    private saveTimeToDB(t: Time): void {\n        // if there's no current user the time is discarded\n        if (this.state.user === null) {\n            alert(\"Error (saveTimeToDB): User is null\");\n        } else {\n            // this function is called right before setstate, so we need to\n            // manually compute what the bucket will look like on the next render\n            const bucket_is_full = this.state.bucket.length === this.state.current_event.avg_size;\n            const next_bucket = bucket_is_full ? [t] : this.state.bucket.concat([t]);\n            const bucket_json = next_bucket.map(timeToJson);\n\n            // get a path to the db document for the current event\n            const current_event_doc = this.db.collection(\"Users\")\n                                             .doc(this.state.user.uid)\n                                             .collection(\"Events\")\n                                             .doc(this.state.current_event.wca_db_str);\n\n            // if we finished an avg, save it to the db\n            const new_time = timeToRaw(t);\n            const pb_single = this.state.stats.pb_single;\n            const pb_single_loc = this.state.stats.pb_single_loc;\n            const pb_avg = this.state.stats.pb_avg;\n            const pb_avg_loc = this.state.stats.pb_avg_loc;\n\n            if (bucket_is_full) {\n                const avg_json = bucketToJsonAvg(this.state.bucket);\n                current_event_doc.collection(\"Avgs\").add(avg_json)\n                    .then((avg_doc_ref) => {\n                        // if the current pb single is in the bucket and not\n                        // about to be beaten by the new time, update its location\n                        // (checking now saves a query if we did just break the pb)\n                        if (pb_single_loc === \"bucket\" && isFaster(pb_single, new_time)) {\n                            current_event_doc.set({\n                                stats: {\n                                    pb_single_loc: avg_doc_ref.id,\n                                }\n                            }, {merge: true});\n                        }\n\n                        // Check for a new PB avg and update stats if necessary\n                        if (pb_avg === null || isFaster(avg_json.avg, pb_avg)) {\n                            current_event_doc.set({\n                                stats: {\n                                    pb_avg: avg_json.avg,\n                                    pb_avg_loc: avg_doc_ref.id,\n                                }\n                            }, {merge: true});\n                        }\n                    });\n            }\n\n            // Check for a new PB single and update stats if necessary\n            if (pb_single === -2 || isFaster(new_time, pb_single)) {\n                current_event_doc.set({\n                    stats: {\n                        pb_single: new_time,\n                        pb_single_loc: \"bucket\",\n                    }\n                }, {merge: true});\n            }\n\n            // add the new time to the db\n            current_event_doc.set({\n                \"bucket\": bucket_json,\n            }, {merge: true});\n        }\n    }\n\n    private toggle_last_penalty(pen: Penalty) {\n        if (this.state.user === null) {\n            alert(\"Error (toggle_last_penalty): User is null\");\n        } else {    \n            const old_bucket = this.state.bucket.slice();\n            const old_time = old_bucket.pop();\n\n            // there must be a previous solve to penalize\n            if (old_time === undefined) {\n                console.error(\"Tried to toggle penalty with no previous solve\");\n                return;\n            }\n\n            const old_pen = old_time!.pen;\n            const new_time = pen === old_pen ? { raw: old_time!.raw, pen: undefined }\n                                             : { raw: old_time!.raw, pen: pen };\n\n            const new_bucket = old_bucket.concat([new_time]);\n            const new_bucket_json = new_bucket.map(timeToJson);\n\n            // get a path to the db document for the current event\n            const current_event_doc = this.db.collection(\"Users\")\n                                             .doc(this.state.user.uid)\n                                             .collection(\"Events\")\n                                             .doc(this.state.current_event.wca_db_str);\n\n            current_event_doc.set({\n                bucket: new_bucket_json\n            }, {merge: true}).then(() => {\n                this.recompute_pb_single(new_bucket);\n            });\n        }\n    }\n\n    // compute the pb single over the history of averages and the bucket passed in\n    private recompute_pb_single(bucket: Time[]) {\n        if (this.state.user === null) {\n            alert(\"Error (recompute_pb_single): User is null\");\n        } else {\n            // find the best single currently in the bucket\n            let best_in_bucket = -2; // recall -2 means \"no pb single exists\"\n            if (bucket.length !== 0) {\n                best_in_bucket = -1;\n                for (let t of bucket.map(timeToRaw)) {\n                    if (isFaster(t, best_in_bucket)) {\n                        best_in_bucket = t;\n                    }\n                }\n            }\n\n            // find the best single in any stored average\n            const current_event_doc = this.db.collection(\"Users\")\n                                            .doc(this.state.user.uid)\n                                            .collection(\"Events\")\n                                            .doc(this.state.current_event.wca_db_str);\n            current_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"best\", \"asc\")\n                .limit(1)\n                .get()\n                .then((snap) => {\n                    if (snap.docs.length === 0) {\n                        // if there are no stored avgs, bucket pb wins\n                        current_event_doc.set({\n                            stats: {\n                                pb_single: best_in_bucket,\n                                pb_single_loc: \"bucket\",\n                            }\n                        }, {merge: true});\n                    } else if (best_in_bucket === -2) {\n                        // if there are stored avgs and bucket pb doesn't exist, avg pb wins\n                        const containing_avg = snap.docs[0].data() as JsonAvg;\n                        const best_in_hist = containing_avg.best;\n\n                        current_event_doc.set({\n                            stats: {\n                                pb_single: best_in_hist,\n                                pb_single_loc: snap.docs[0].id,\n                            }\n                        }, {merge: true});\n                    } else {\n                        // else, compare the best pb from an avg with bucket pb\n                        const containing_avg = snap.docs[0].data() as JsonAvg;\n                        const best_in_hist = containing_avg.best;\n\n                        current_event_doc.set(isFaster(best_in_bucket, best_in_hist) ? {\n                            stats: {\n                                pb_single: best_in_bucket,\n                                pb_single_loc: \"bucket\",\n                            }} : {\n                            stats: {\n                                pb_single: best_in_hist,\n                                pb_single_loc: snap.docs[0].id,\n                            }\n                        }, {merge: true});\n                    }\n                });\n        }\n    }\n\n    // compute the pb single over the history of averages and the bucket passed in\n    private recompute_pb_avg() {\n        if (this.state.user === null) {\n            alert(\"Error (recompute_pb_avg): User is null\");\n        } else {\n            // find the best stored average\n            const current_event_doc = this.db.collection(\"Users\")\n                                            .doc(this.state.user.uid)\n                                            .collection(\"Events\")\n                                            .doc(this.state.current_event.wca_db_str);\n            current_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"avg\", \"asc\")\n                .limit(1)\n                .get()\n                .then((snap) => {\n                    if (snap.docs.length === 0) {\n                        // if there are no stored avgs, pb avg doesn't exist\n                        current_event_doc.set({\n                            stats: {\n                                pb_avg: null,\n                                pb_avg_loc: null,\n                            }\n                        }, {merge: true});\n                    } else {\n                        // update the stats with the new best avg\n                        const new_pb_avg = snap.docs[0].data() as JsonAvg;\n                        current_event_doc.set({\n                            stats: {\n                                pb_avg: new_pb_avg.avg,\n                                pb_avg_loc: snap.docs[0].id,\n                            }\n                        }, {merge: true});\n                    }\n                });\n        }\n    }\n\n    private delete_last_time() {\n        if (this.state.user === null) {\n            alert(\"Error (delete_last_time): User is null\");\n        } else {\n            // delete the most recent time\n            let new_bucket = this.state.bucket.slice();\n            const deleted_time = new_bucket.pop();\n\n            // get a path to the db document for the current event\n            const current_event_doc = this.db.collection(\"Users\")\n                                             .doc(this.state.user.uid)\n                                             .collection(\"Events\")\n                                             .doc(this.state.current_event.wca_db_str);\n\n            // update the bucket\n            current_event_doc.set({\n                \"bucket\": new_bucket.map(timeToJson),\n            }, {merge: true});\n\n            // recompute the pb single if we just deleted it\n            if (timeToRaw(deleted_time!) === this.state.stats.pb_single) {\n                this.recompute_pb_single(new_bucket);\n            }\n        }\n    }\n\n    private delete_avg(id: string) {\n        if (this.state.user === null) {\n            alert(\"Error (delete_avg): User is null\");\n        } else {\n            const hist_ref = this.db.collection(\"Users\")\n                                     .doc(this.state.user.uid)\n                                     .collection(\"Events\")\n                                     .doc(this.state.current_event.wca_db_str)\n                                     .collection(\"Avgs\")\n            hist_ref.doc(id).delete().then(() => {\n                // recompute pb single if we just deleted it\n                if (id === this.state.stats.pb_single_loc) {\n                    this.recompute_pb_single(this.state.bucket);\n                }\n                // recompute pb avg if we just deleted it\n                if (id === this.state.stats.pb_avg_loc) {\n                    this.recompute_pb_avg();\n                }\n            });\n        }\n    }\n\n    private handleKeyDown(event: any) {\n        this.setState((state, props) => {\n            let nextState: Model;\n            switch (state.phase.name) {\n                case \"inspecting\":\n                    nextState =\n                        event.code === \"Space\" // only spacebar should ready the timer\n                            ? {\n                                  ...state,\n                                  phase: { name: \"red\", timeTurnedRed: Date.now() },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n\n                case \"running\":\n                    let timeToSave = {\n                        // convert to centiseconds\n                        raw: Math.floor(state.elapsed / 10),\n                        pen: state.penalty\n                    };\n\n                    nextState = {\n                        ...state,\n                        phase: { name: \"stopped\" },\n                        scramble: getScramble(state.current_event.scramble_str),\n                    };\n\n                    this.saveTimeToDB(timeToSave);\n                    break;\n\n                default:\n                    nextState = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextState;\n        });\n    }\n\n    private handleKeyUp(event: any) {\n        this.setState((state, props) => {\n            let nextState: Model;\n            switch (state.phase.name) {\n                case \"waiting\":\n                    // only spacebar should start inspection\n                    nextState =\n                        event.code === \"Space\"\n                            ? {\n                                  ...state,\n                                  startTime: Date.now(),\n                                  phase: { name: \"inspecting\" },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n                case \"red\":\n                    // only lifting spacebar should return to inspection\n                    nextState =\n                        event.code === \"Space\"\n                            ? {\n                                  ...state,\n                                  phase: { name: \"inspecting\" },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n                case \"green\":\n                    // start the solve phase\n                    nextState =\n                        event.code === \"Space\" // only spacebar should start the timer\n                            ? {\n                                  ...state,\n                                  startTime: Date.now(),\n                                  elapsed: 0,\n                                  phase: { name: \"running\" },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n                case \"stopped\":\n                    nextState = {\n                        ...state,\n                        phase: { name: \"waiting\" },\n                    };\n                    break;\n                default:\n                    nextState = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextState;\n        });\n    }\n\n    private tick() {\n        this.setState((state, props) => {\n            let nextState: Model;\n\n            switch (state.phase.name) {\n                case \"red\":\n                    if (timeSince(state.phase.timeTurnedRed) >= 550) {\n                        nextState = {\n                            ...state,\n                            elapsed: timeSince(state.startTime),\n                            phase: { name: \"green\" },\n                            penalty: inspPenalty(state.elapsed),\n                        };\n                    } else {\n                        nextState = {\n                            ...state,\n                            elapsed: timeSince(state.startTime),\n                            penalty: inspPenalty(state.elapsed),\n                        };\n                    }\n                    break;\n                case \"inspecting\":\n                    nextState = {\n                        ...state,\n                        elapsed: timeSince(state.startTime),\n                        penalty: inspPenalty(state.elapsed),\n                    };\n                    break;\n                case \"green\":\n                    nextState = {\n                        ...state,\n                        elapsed: timeSince(state.startTime),\n                        penalty: inspPenalty(state.elapsed),\n                    };\n                    break;\n                case \"running\":\n                    nextState = {\n                        ...state,\n                        elapsed: timeSince(state.startTime),\n                    };\n                    break;\n                default:\n                    nextState = state;\n                    break;\n            }\n            return nextState;\n        });\n    }\n\n    private changeEvent(selected: Event | Event[] | null | undefined) {\n        if (selected && !(selected instanceof Array)) {\n            this.setState({\n                current_event: selected,\n            });\n            this.subscribe_to_event(selected);\n        } else {\n            console.log(\"Invalid input to event select handler.\");\n        }\n    }\n\n    private changeWCAId(e: React.FormEvent<HTMLFormElement>, new_id: string): void {\n        this.setState({ wca_id: new_id });\n        e.preventDefault();\n        if (this.state.user === null) {\n            return            \n        } else {\n            this.db.collection(\"Users\")\n                   .doc(this.state.user.uid)\n                   .set({\n                       wca_id: new_id,\n                   }, {merge: true});\n        }\n    }\n\n    // all times from history and bucket, from least to most recent\n    private all_times_raw_array(): number[] {\n        // TODO: check for sorting bugs\n        const bucket_times = this.state.bucket.map((t) => timeToRaw(t));\n\n        const compare_by_timestamp = (avg1: JsonAvg, avg2: JsonAvg) => {\n            const d1 = avg1.timestamp.toDate();\n            const d2 = avg2.timestamp.toDate();\n            if (d1 < d2) {\n                return -1;\n            } else if (d1 > d2) {\n                return 1;\n            } else {\n                return 0;\n            }\n        };\n\n        const hist_times = Object.values(this.state.history)\n                                 .sort(compare_by_timestamp)\n                                 .flatMap((avg) => avg.times);\n\n        return hist_times.concat(bucket_times);\n    }\n\n    private inspect_avg(avg_id: string) {\n        this.setState({\n            inspect_avg: avg_id,\n        })\n    }\n\n    private uninspect_avg() {\n        this.setState({\n            inspect_avg: undefined,\n        })\n    }\n\n    public render() {\n        return (\n            <section className=\"flex items-start justify-between overflow-hidden-ns vh-100\">\n                <div className=\"flex flex-column vh-100 justify-between w-25 outline\">\n                    <div className=\"outline\">\n                        <EventPicker\n                            onChange={this.changeEvent}\n                            isDisabled={this.state.phase.name !== \"waiting\"}\n                        />\n                        <StatsCard\n                            event={this.state.current_event}\n                            stats={this.state.stats}\n                            inspect_func={this.inspect_avg}\n                        />\n                    </div>\n                    <HistoryCard\n                        hist={this.state.history}\n                        load_more_func={this.loadMoreHistory}\n                        inspect_func={this.inspect_avg}\n                    />\n                </div>\n\n                <div className=\"flex flex-column justify-between vh-100 w-50 outline\">\n                    {\n                        this.state.inspect_avg === undefined\n                        ?\n                        <React.Fragment>\n                            <ScrambleText\n                                scramble={this.state.scramble}\n                                event={this.state.current_event}\n                            />\n                            <TimerDisplay\n                                ms={this.state.elapsed}\n                                phase={this.state.phase}\n                                pen={this.state.penalty}\n                            />\n                            <ScoreCard\n                                times={this.state.bucket}\n                                edit_fn={this.toggle_last_penalty}\n                                delete_fn={this.delete_last_time}\n                                avg_size={this.state.current_event.avg_size}\n                            />\n                            <WCACard\n                                event={this.state.current_event}\n                                wca_id={this.state.wca_id}\n                                home_times={this.all_times_raw_array()}\n                            />\n                        </React.Fragment>\n                        :\n                        <React.Fragment>\n                            <HistoryDetail\n                                avg_id={this.state.inspect_avg}\n                                avg_json={this.state.history[this.state.inspect_avg]}\n                                delete_func={this.delete_avg}\n                                close_func={this.uninspect_avg}\n                            />\n                        </React.Fragment>\n                    }\n                </div>\n\n                <div className=\"flex flex-column vh-100 justify-between w-25 outline\">\n                    <div id=\"scramble_image\"\n                         className=\"outline tc\"\n                         dangerouslySetInnerHTML={this.state.scramble_img}\n                    >\n                    </div>\n                    <SettingsCard\n                        wca_id={this.state.wca_id}\n                        id_change_handler={this.changeWCAId}\n                    />\n                    <SignInForm user={this.state.user} />\n                </div>\n            </section>\n        );\n\n    }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as firebase from \"firebase/app\";\nimport Timer from \"./Timer\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDwiz-hIBeojGWqnk6rE7Ao3b7LS9-Wg6g\",\n  authDomain: \"timer-v0.firebaseapp.com\",\n  databaseURL: \"https://timer-v0.firebaseio.com\",\n  projectId: \"timer-v0\",\n  storageBucket: \"timer-v0.appspot.com\",\n  messagingSenderId: \"998055254824\",\n  appId: \"1:998055254824:web:3149843957307226\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<Timer />, document.getElementById(\"root\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}