{"version":3,"sources":["serviceWorker.tsx","Types.tsx","Util.tsx","ScrambleText.tsx","ScoreCard.tsx","StatsCard.tsx","TimerDisplay.tsx","HistoryCard.tsx","HistoryDetail.tsx","EventPicker.tsx","SignInForm.tsx","WCACard.tsx","SettingsCard.tsx","Timer.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Penalty","timeSince","t","Date","now","rawTimeToString","time","h","Math","floor","pow","m","s","timeString","n","console","assert","result","padCs","timeToString","time_string","raw","pen","DNF","PlusTwo","timeToJson","timeFromJson","t_json","pen_str","timeToRaw","isFaster","t1","t2","t1_is_dnf","t2_is_dnf","compareTimes","ScrambleText","this","props","event","scramble_str","react","id","className","style","whiteSpace","scramble","React","ScoreCard","_this","edit_ctrls","onClick","edit_fn","delete_fn","rows","num_times","times","length","i","key","avg_size","push","StatsCard","stats","pb_single","inspect_func","pb_single_loc","pb_avg","pb_avg_loc","inspPenalty","undefined","msToString","padMs","TimerDisplay","ms","colorClass","phase","name","toString","msPenToString","HistoryCard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hist","avg_lis","_loop","avg","map","join","hist_to_list_items","load_more_func","HistoryDetail","avg_json","delete_func","avg_id","close_func","EventPicker","eventOptions","wca_db_str","react_select_esm","onChange","isDisabled","defaultValue","options","theme","objectSpread","borderRadius","colors","primary25","primary","getOptionLabel","_ref","openMenuOnFocus","blurInputOnSelect","styles","menuList","base","maxHeight","isOptionSelected","selOpt","selOptArr","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","signInFlow","signInSuccessUrl","signInOptions","firebase","GoogleAuthProvider","PROVIDER_ID","tosUrl","privacyPolicyUrl","SignInForm","user","signOut","displayName","StyledFirebaseAuth_default","a","firebaseAuth","WCACard","state","single_or_avg","wca_pb","_this2","maybe_get_wca_pb","bind","fetch","wca_id","then","response","json","person_json","prevProps","_this3","which_kind","event_str","hasOwnProperty","setState","_this4","y_vals","home_times","data","x","y","victory_chart","height","victory_area","y0","fill","victory_line","labels","stroke","SettingsCard","updateFormContent","assertThisInitialized","submitWCAId","e","target","value","id_change_handler","onSubmit","type","Timer","intervalID","db","unsub_auth","onAuthStateChanged","subscribe_to_event","current_event","startTime","elapsed","penalty","bucket","scramble_img","__html","history","cur_event_listeners","auth_listener","window_width","innerWidth","handleKeyDown","handleKeyUp","handleTouchStart","handleTouchEnd","handleWindowSizeChange","changeEvent","changeWCAId","loadMoreHistory","toggle_last_penalty","delete_last_time","delete_avg","inspect_avg","uninspect_avg","setInterval","tick","document","addEventListener","clearInterval","removeEventListener","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","unsub_func","err","return","getScramble","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","target_event_doc","collection","doc","uid","unsub_history","orderBy","limit","onSnapshot","snap","avgs","docs","doc_ids","new_hist","forEach","last_hist_doc","unsub_bucket","bucket_times","get","saved","startAfter","new_avgs","new_keys","assign","alert","bucket_is_full","bucket_json","concat","current_event_doc","new_time","sorted_raws","slice","sort","num_solves","best","worst","timestamp","Timestamp","bucketToJsonAvg","add","avg_doc_ref","set","merge","_this5","old_bucket","old_time","pop","error","new_bucket","new_bucket_json","recompute_pb_single","best_in_bucket","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","best_in_hist","new_pb_avg","deleted_time","_this6","delete","recompute_pb_avg","_this7","nextstate","timeTurnedRed","timetosave","saveTimeToDB","nextState","getElementById","_this8","code","timeToSave","selected","Array","log","new_id","preventDefault","values","avg1","avg2","d1","toDate","d2","flatMap","src_EventPicker","src_ScrambleText","TimerDisplay_TimerDisplay","src_ScoreCard","src_SignInForm","src_StatsCard","src_HistoryCard","src_WCACard","all_times_raw_array","src_HistoryDetail","src_SettingsCard","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","react_default","createElement","src_Timer","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2dbe83eb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nexport interface Time {\n    raw: number;\n    pen?: Penalty;\n}\n\nexport enum Penalty {\n    DNF,\n    PlusTwo,\n}\n\nexport type PenString = \"dnf\" | \"plus\" | \"\";\n\nexport interface JsonTime {\n    raw: number,\n    pen: PenString,\n}\n\nexport interface JsonAvg {\n    best: number;\n    worst: number;\n    times: number[];\n    avg: number;\n    timestamp: firebase.firestore.Timestamp;\n}\n\nexport interface StatsRecord {\n    pb_single: number;\n    pb_single_loc: string; // a doc id, \"bucket\", or \"\"\n    pb_avg: number | null;\n    pb_avg_loc: string | null;\n}\n\nexport type TimerPhase =\n    | { name: \"waiting\" }\n    | { name: \"inspecting\" }\n    | { name: \"green\" }\n    | { name: \"red\"; timeTurnedRed: number }\n    | { name: \"running\" }\n    | { name: \"stopped\" };\n\nexport interface Event {\n    name: string;\n    avg_size: number;\n    scramble_str: string;\n    wca_db_str: string;\n}\n\nexport type WhichScramble = 0 | 1;\n","import { Time, Penalty, PenString, JsonTime, JsonAvg } from \"./Types\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\n// return the elapsed time since t\nfunction timeSince(t: number): number {\n    return Date.now() - t;\n}\n\n// helper function for rawTimeToString\n// pad a centisecond value with zeros until it's two digits\nfunction padCs(n: number): string {\n    console.assert(n >= 0 && n < 100, \"Invalid argument to padCs() (\" + n + \")\");\n\n    let result: string = \"\";\n\n    if (n < 10) {\n        result = result + \"0\" + n;\n    } else if (n < 100) {\n        result = result + n;\n    }\n\n    return result;\n}\n\n// pretty-print a centisecond value as a time in h:m:s.dc format\nfunction rawTimeToString(time: number): string {\n    if (time === -1) {\n        return \"DNF\";\n    }\n\n    // Get the h:m:s.dc components of the time\n    let h = Math.floor((time % (100 * 60 ** 3)) / (100 * 60 ** 2));\n    let m = Math.floor((time % (100 * 60 ** 2)) / (100 * 60));\n    let s = Math.floor((time % (100 * 60)) / 100);\n    let dc = Math.floor(time % 100);\n\n    let timeString: string = \"\";\n\n    if (h !== 0) {\n        timeString = timeString + h + \":\";\n    }\n    if (h !== 0 && m < 10) {\n        timeString = timeString + \"0\";\n    }\n    if (m !== 0) {\n        timeString = timeString + m + \":\";\n    }\n    if (m !== 0 && s < 10) {\n        timeString = timeString + \"0\";\n    }\n\n    timeString = timeString + s + \".\" + padCs(dc);\n\n    return timeString;\n}\n\n// print a Time value, including penalties\nfunction timeToString(t: Time): string {\n    let time_string = rawTimeToString(t.raw);\n    if (t.pen === Penalty.DNF) {\n        return \"DNF (\" + time_string + \")\";\n    } else if (t.pen === Penalty.PlusTwo) {\n        return rawTimeToString(t.raw + 200);\n        // return time_string + \" + 2 = \" + rawTimeToString(t.raw + 200);\n    } else {\n        return time_string;\n    }\n}\n\n// print a string penalty code (for backend use)\nfunction penToString(pen: Penalty | undefined): PenString {\n    if (pen === Penalty.DNF) {\n        return \"dnf\";\n    } else if (pen === Penalty.PlusTwo) {\n        return \"plus\";\n    } else {\n        return \"\";\n    }\n}\n\n// convert penalty codes to Penalty values\nfunction penFromString(pen_str: PenString): Penalty | undefined {\n    if (pen_str === \"dnf\") {\n        return Penalty.DNF;\n    } else if (pen_str === \"plus\") {\n        return Penalty.PlusTwo;\n    } else {\n        return undefined;\n    }\n}\n\nfunction timeToJson(t: Time): JsonTime {\n    return {\n        raw: t.raw,\n        pen: penToString(t.pen),\n    }\n}\n\nfunction timeFromJson(t_json: JsonTime): Time {\n    return {\n        raw: t_json.raw,\n        pen: penFromString(t_json.pen),\n    }\n}\n\n// convert a Time object to centiseconds (-1 = DNF)\nfunction timeToRaw(t: Time): number {\n    if (t.pen === Penalty.DNF) {\n        return -1;\n    } else if (t.pen === Penalty.PlusTwo) {\n        return t.raw + 200;\n    } else {\n        return t.raw;\n    }\n}\n\n// returns true if t1 is faster than t2\n// ties return false\nfunction isFaster(t1: number, t2: number) {\n    const t1_is_dnf = t1 === -1;\n    const t2_is_dnf = t2 === -1;\n\n    if (t1_is_dnf && !t2_is_dnf) {\n        return false;\n    } else if (!t1_is_dnf && t2_is_dnf) {\n        return true;\n    } else if (t1_is_dnf && t2_is_dnf) {\n        return false;\n    } else {\n        return t1 < t2;\n    }\n}\n\n// returns negative if t1 is faster than t2, positive if slower, 0 if equal\nfunction compareTimes(t1: Time, t2: Time): number {\n    const t1_is_dnf = t1.pen === Penalty.DNF;\n    const t2_is_dnf = t2.pen === Penalty.DNF;\n\n    if (t1_is_dnf && !t2_is_dnf) {\n        return 1;\n    } else if (!t1_is_dnf && t2_is_dnf) {\n        return -1;\n    } else if (t1_is_dnf && t2_is_dnf) {\n        return 0;\n    } else {\n        const t1_raw = timeToRaw(t1);\n        const t2_raw = timeToRaw(t2);\n        return t1_raw - t2_raw;\n    }\n}\n\n// map a bucket of times to a Json object for storage\nfunction bucketToJsonAvg(bucket: Time[]): JsonAvg {\n    const sorted_raws = bucket.slice(0).sort(compareTimes).map(timeToRaw);\n\n    const num_solves = sorted_raws.length;\n    console.assert(num_solves === 5 || num_solves === 3);\n    const best = sorted_raws[0];\n    const worst = sorted_raws[num_solves - 1];\n\n    let avg = -1;\n\n    if (num_solves === 5 && sorted_raws[3] !== -1) {\n        avg = (sorted_raws[1] + sorted_raws[2] + sorted_raws[3]) / 3;\n    } else if (num_solves === 3 && sorted_raws[2] !== -1) {\n        avg = (sorted_raws[0] + sorted_raws[1] + sorted_raws[2]) / 3;\n    }\n\n    return {\n        times: bucket.map(timeToRaw),\n        best: best,\n        worst: worst,\n        avg: Math.floor(avg),\n        timestamp: firebase.firestore.Timestamp.now(),\n    }\n}\n\nexport {\n    rawTimeToString,\n    timeToString,\n    timeSince,\n    penToString,\n    timeToJson,\n    timeToRaw,\n    timeFromJson,\n    bucketToJsonAvg,\n    isFaster,\n    compareTimes,\n};\n","import * as React from \"react\";\nimport { Event } from \"./Types\";\n\ninterface Props {\n    scramble: string,\n    event: Event,\n}\nclass ScrambleText extends React.PureComponent<Props, {}> {\n    public render() {\n        return (\n            this.props.event.scramble_str === \"minx\" ? \n                <div id=\"scramble_area\" className=\"f3 tc\" style={{whiteSpace: \"pre-wrap\"}}>\n                    {this.props.scramble}\n                </div> :\n                <div id=\"scramble_area\" className=\"f3 tc\">\n                    {this.props.scramble}\n                </div>\n        );\n    }\n}\n\nexport default ScrambleText;\n","import * as React from \"react\";\nimport { timeToString } from \"./Util\";\nimport { Time, Penalty } from \"./Types\";\n\n\ninterface Props {\n    times: Time[];\n    edit_fn: (arg0: Penalty) => void;\n    delete_fn: () => void;\n    avg_size: number;\n}\n\nclass ScoreCard extends React.PureComponent<Props, {}> {\n    public render() {\n        // TODO shade the selected penalty button\n        const edit_ctrls = <span className=\"\">\n                               <a className=\"link dim br1 bt bb bl ph1 dib black pointer\"\n                                  onClick={() => this.props.edit_fn(Penalty.PlusTwo)}>+2\n                               </a>\n                               <a className=\"link dim br1 ba ph1 dib black pointer\"\n                                  onClick={() => this.props.edit_fn(Penalty.DNF)}>DNF\n                               </a>\n                               <a className=\"link dim br1 bt bb br ph1 dib black pointer\"\n                                  onClick={() => this.props.delete_fn()}>×\n                               </a>\n                           </span>;\n\n        // build array of scorecard rows\n        let rows = [];\n        const num_times = this.props.times.length;\n\n        for (let i = 0; i < num_times; i++) {\n            let t = this.props.times[i];\n            rows[i] = (\n                <li key={i} className=\"flex justify-between ph2 pv2 bb b--light-silver\">\n                    {timeToString(t)}\n                    {i === num_times - 1 ? edit_ctrls : \"\"}\n                </li>\n            );\n        }\n\n        while (rows.length < this.props.avg_size) {\n            rows.push(\n                <li key={rows.length} className=\"ph2 pv2 bb b--light-silver\">\n                    &nbsp;\n                </li>\n            );\n        }\n\n        return (\n            <div className=\"center mw5\">\n                <h1 className=\"f5 small-caps\">Current Average</h1>\n                <ul className=\"list pl0 ml0 ba b--light-silver br1\">{rows}</ul>\n            </div>\n        );\n    }\n}\n\nexport default ScoreCard;\n","import * as React from \"react\";\nimport { Event, JsonAvg, StatsRecord } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\n\ninterface Props {\n    event: Event;\n    stats: StatsRecord;\n    inspect_func: (id: string) => void;\n}\n\nclass StatsCard extends React.PureComponent<Props, {}> {\n    public render() {\n        const avg_size_str = this.props.event.avg_size === 5 ? \"Ao5\" : \"Mo3\";\n        return (\n            <div className=\"outline\">\n                <dl className=\"lh-title ml3\">\n                    <dt className=\"f6 b\">Best Single</dt>\n                    {\n                        this.props.stats.pb_single === -2\n                            ? <dd className=\"ml0\">N/A</dd>\n                            : <dd className=\"ml0\">\n                              <span className=\"pointer bg-animate bg-white hover-bg-light-silver\"\n                                    onClick={() =>\n                                        this.props.inspect_func(this.props.stats.pb_single_loc)\n                                    }\n                              >\n                                {rawTimeToString(this.props.stats.pb_single)}\n                              </span>\n                              </dd>\n                    }\n                    <dt className=\"f6 b\">Best Avg.</dt>\n                    {\n                        (this.props.stats.pb_avg === null || this.props.stats.pb_avg_loc === null)\n                            ? <dd className=\"ml0\">N/A</dd>\n                            : <dd className=\"ml0\">\n                              <span className=\"pointer bg-animate bg-white hover-bg-light-silver\"\n                                    onClick={() =>\n                                        this.props.inspect_func(this.props.stats.pb_avg_loc!)\n                                    }\n                              >\n                                {rawTimeToString(this.props.stats.pb_avg)}\n                              </span>\n                              </dd>\n                    }\n                </dl>\n            </div>\n        );\n    }\n}\n\nexport default StatsCard;\n","import * as React from \"react\";\nimport { Penalty, TimerPhase } from \"./Types\";\n\n// The timer display is the only component that operates at millisecond precision,\n// so all the millisecond-related helper functions are in here.\n// Times are truncated to centiseconds as soon as they are stored in the bucket.\n// Any ms value outside this file (or its wiring in Timer.tsx) probably indicates a bug.\n\n// returns the penalty incurred by an inspection time\nfunction inspPenalty(time: number): Penalty | undefined {\n    let pen = undefined;\n    if (time >= 17000) {\n        pen = Penalty.DNF;\n    } else if (time >= 15000) {\n        pen = Penalty.PlusTwo;\n    }\n    return pen;\n}\n\n// pretty-print an ms value as an inspection time\nfunction msToInspString(ms: number): string {\n    if (ms >= 17000) {\n        return \"DNF\";\n    } else if (ms >= 15000) {\n        return \"+2\";\n    }\n\n    let s = Math.floor((ms % (1000 * 60)) / 1000);\n    return (15 - s).toString();\n}\n\n// helper function for msToString\n// pad a ms value with zeros until it's three digits\nfunction padMs(n: number): string {\n    console.assert(n >= 0 && n < 1000, \"Invalid argument to padMs() (\" + n + \")\");\n\n    let result: string = \"\";\n\n    if (n < 10) {\n        result = result + \"00\" + n;\n    } else if (n < 100) {\n        result = result + \"0\" + n;\n    } else if (n < 1000) {\n        result = result + n;\n    }\n\n    return result;\n}\n\n// pretty-print a ms value as a time in h:m:s.dcm format\nfunction msToString(time: number): string {\n    // Get the h:m:s.dcm components of the time\n    let h = Math.floor((time % (1000 * 60 ** 3)) / (1000 * 60 ** 2));\n    let m = Math.floor((time % (1000 * 60 ** 2)) / (1000 * 60));\n    let s = Math.floor((time % (1000 * 60)) / 1000);\n    let dcm = Math.floor(time % 1000);\n\n    let timeString: string = \"\";\n\n    if (h !== 0) {\n        timeString = timeString + h + \":\";\n    }\n    if (h !== 0 && m < 10) {\n        timeString = timeString + \"0\";\n    }\n    if (m !== 0) {\n        timeString = timeString + m + \":\";\n    }\n    if (m !== 0 && s < 10) {\n        timeString = timeString + \"0\";\n    }\n\n    timeString = timeString + s + \".\" + padMs(dcm);\n\n    return timeString;\n}\n\nfunction msPenToString(ms: number, pen: Penalty) {\n    let time_string = msToString(ms);\n    if (pen === Penalty.DNF) {\n        return \"DNF (\" + time_string + \")\";\n    } else if (pen === Penalty.PlusTwo) {\n        return time_string + \" + 2 = \" + msToString(ms + 2000);\n    } else {\n        return time_string;\n    }\n}\n\ninterface Props {\n    ms: number;\n    phase: TimerPhase;\n    pen: Penalty | undefined;\n}\n\nclass TimerDisplay extends React.Component<Props, {}> {\n    public render() {\n        // Set the color of the timer\n        let colorClass = \"black\";\n        if (this.props.phase.name === \"red\") {\n            colorClass = \"red\";\n        } else if (this.props.phase.name === \"green\") {\n            colorClass = \"green\";\n        }\n\n        // Pretty-print the timer readout\n        let timeString: string;\n        if (\n            this.props.phase.name === \"inspecting\" ||\n            this.props.phase.name === \"red\" ||\n            this.props.phase.name === \"green\"\n        ) {\n            timeString = msToInspString(this.props.ms);\n        } else if (\n            (this.props.phase.name === \"stopped\" || this.props.phase.name === \"waiting\") &&\n            this.props.pen !== undefined\n        ) {\n            timeString = msPenToString(this.props.ms, this.props.pen);\n        } else {\n            timeString = msToString(this.props.ms);\n        }\n        return (\n            <p id={\"timer_text\"} className={\"noselect w-100 tc f1 code \" + colorClass}>\n                {timeString}\n            </p>\n        );\n    }\n}\n\n// export default TimerDisplay;\nexport { inspPenalty, TimerDisplay };\n","import * as React from \"react\";\nimport { Time, JsonAvg } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\n\n\ninterface Props {\n    hist: {[id: string]: JsonAvg};\n    load_more_func: any;\n    inspect_func: (id: string) => void;\n}\n\nclass HistoryCard extends React.PureComponent<Props, {}> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    private hist_to_list_items(hist: {[id: string]: JsonAvg}): JSX.Element[] {\n        let avg_lis = [];\n\n        for (let id in hist) {\n            avg_lis.push(\n                <li key={id}\n                    className=\"bg-animate bg-white hover-bg-light-silver pointer\"\n                    onClick={() => this.props.inspect_func(id)}\n                >\n                    <b className=\"pt1\">{rawTimeToString(hist[id].avg)}</b>\n                    <div>{hist[id].times.map(rawTimeToString).join(\" \")}</div>\n                </li>\n            );\n        }\n\n        return avg_lis;\n    }\n\n    public render() {\n        return (\n            <div className=\"dn db-ns overflow-auto\">\n                <ul className=\"list pl0 mv0\">\n                    {\n                        this.hist_to_list_items(this.props.hist)\n                    }\n                </ul>\n                <div className=\"pv3 tc\">\n                    <a className=\"ba pointer ph1\" onClick={this.props.load_more_func}>Load more</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HistoryCard;\n","import * as React from \"react\";\nimport { Time, JsonAvg } from \"./Types\";\nimport { rawTimeToString } from \"./Util\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\ninterface Props {\n    avg_id: string;\n    avg_json: JsonAvg;\n    // scrambles_ref?: firebase.firestore.CollectionReference;\n    delete_func: (id: string) => void;\n    close_func: () => void;\n}\n\nclass HistoryDetail extends React.PureComponent<Props, {}> {\n    public render() {\n        return (\n            <div>\n                <h1 className=\"f4 bg-near-black white mv0 pv2 ph3\">Average detail</h1>\n                <div className=\"pa3 bt\">\n                  <p className=\"f6 f5-ns lh-copy measure mv0\">\n                  {rawTimeToString(this.props.avg_json.avg)}\n                  </p>\n                  <p className=\"f6 f5-ns lh-copy measure mv0\">\n                  {this.props.avg_json.times.map(rawTimeToString).join(\" \")}\n                  </p>\n                </div>\n                <div className=\"pv3 tc\">\n                    <a className=\"ba pointer ph1\"\n                       onClick={() => {\n                           this.props.delete_func(this.props.avg_id);\n                           this.props.close_func();\n                       }}\n                    >Delete Average</a>\n                </div>\n                <div className=\"pv3 tc\">\n                    <a className=\"ba pointer ph1\" onClick={this.props.close_func}>Close</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HistoryDetail;\n","import * as React from \"react\";\nimport Select from \"react-select\";\nimport { Event } from \"./Types\";\n\ninterface Props {\n  onChange: (selected?: Event | Event[] | null) => void;\n  isDisabled: boolean;\n}\n\nclass EventPicker extends React.PureComponent<Props, {}> {\n  private eventOptions = [\n    { name: \"2x2x2\", avg_size: 5, scramble_str: \"222\", wca_db_str: \"222\" },\n    { name: \"3x3x3\", avg_size: 5, scramble_str: \"333\", wca_db_str: \"333\" },\n    { name: \"4x4x4\", avg_size: 5, scramble_str: \"444fast\", wca_db_str: \"444\" },\n    { name: \"5x5x5\", avg_size: 5, scramble_str: \"555\", wca_db_str: \"555\" },\n    { name: \"6x6x6\", avg_size: 3, scramble_str: \"666\", wca_db_str: \"666\" },\n    { name: \"7x7x7\", avg_size: 3, scramble_str: \"777\", wca_db_str: \"777\" },\n    { name: \"3x3x3 OH\", avg_size: 5, scramble_str: \"333\", wca_db_str: \"333oh\" },\n    { name: \"3x3x3 BLD\", avg_size: 3, scramble_str: \"333\", wca_db_str: \"333bf\" },\n    { name: \"Pyraminx\", avg_size: 5, scramble_str: \"pyram\", wca_db_str: \"pyram\" },\n    { name: \"Megaminx\", avg_size: 5, scramble_str: \"minx\", wca_db_str: \"minx\" },\n    { name: \"Square-1\", avg_size: 5, scramble_str: \"sq1\", wca_db_str: \"sq1\" },\n    { name: \"Clock\", avg_size: 5, scramble_str: \"clock\", wca_db_str: \"clock\" },\n    { name: \"Skewb\", avg_size: 5, scramble_str: \"skewb\", wca_db_str: \"skewb\" },\n  ];\n\n  public render() {\n    const dropdownStyle = (base: any) => ({\n      // make the menu tall enough that all events are visible\n      maxHeight: 500,\n    });\n\n    return (\n      <React.Fragment>\n        <Select\n          id={\"event_select\"}\n          onChange={this.props.onChange}\n          isDisabled={this.props.isDisabled}\n          defaultValue={this.eventOptions[1]}\n          options={this.eventOptions}\n          theme={theme => ({\n            ...theme,\n            borderRadius: 0,\n            colors: {\n              ...theme.colors,\n              primary25: \"gray\",\n              primary: \"black\",\n            },\n          })}\n          getOptionLabel={({ name }) => name}\n          openMenuOnFocus={true}\n          blurInputOnSelect={true}\n          styles={{ menuList: dropdownStyle }}\n          // This looks like some wacky bug in react-select.\n          // Without the following line, all menu options appear selected.\n          // source: https://stackoverflow.com/questions/52000594/every-menu-option-rendered-as-selected-strange-workaround\n          isOptionSelected={(selOpt, selOptArr) => false}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventPicker;\n","import * as React from \"react\";\nimport * as firebase from \"firebase/app\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport \"firebase/auth\";\n\nconst uiConfig = {\n  // autoUpgradeAnonymousUsers: true,\n  callbacks: {\n    signInSuccessWithAuthResult: function(authResult: firebase.auth.UserCredential, redirectUrl: string) {\n      // User successfully signed in.\n      // Return type determines whether we continue the redirect automatically\n      // or whether we leave that to developer to handle.\n      return false;\n    },\n    // signInFailure callback must be provided to handle merge conflicts which\n    // occur when an existing credential is linked to an anonymous user.\n    // signInFailure: function(error: firebaseui.auth.AuthUIError) {\n    //   // For merge conflicts, the error.code will be\n    //   // 'firebaseui/anonymous-upgrade-merge-conflict'.\n    //   if (error.code != 'firebaseui/anonymous-upgrade-merge-conflict') {\n    //     return Promise.resolve();\n    //   }\n\n    //   const sign_in_anyway = window.confirm(\"An account for that user already exists. Signing in will erase times saved in anonymous mode. Are you sure you want to sign in?\");\n\n    //   if (sign_in_anyway) {\n    //     // Delete the anonymous user\n    //     if (firebase.auth().currentUser !== null && firebase.auth().currentUser!.isAnonymous) {\n    //       firebase.auth().currentUser!.delete();\n    //     }\n    //     // The credential the user tried to sign in with.\n    //     var cred = error.credential;\n    //     // Finish sign-in.\n    //     // return firebase.auth().signInWithCredential(cred);\n    //     firebase.auth().signInWithCredential(cred);\n    //   }\n    //   return Promise.resolve();\n    // },\n  },\n  signInFlow: 'redirect',\n  signInSuccessUrl: '',\n  signInOptions: [\n    // Leave the lines as is for the providers you want to offer your users.\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    // firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    // firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n    // firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    // firebase.auth.PhoneAuthProvider.PROVIDER_ID\n  ],\n  // Terms of service url.\n  tosUrl: '<your-tos-url>',\n  // Privacy policy url.\n  privacyPolicyUrl: '<your-privacy-policy-url>'\n};\n\ninterface Props {\n  user: firebase.User | null;\n}\n\nclass SignInForm extends React.PureComponent<Props> {\n  render() {\n    if (!this.props.user) {\n      return (\n        <div className=\"outline\">\n          <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"pa2 tc\">\n          <a className=\"dark-blue no-underline underline-hover pointer\" onClick={() => firebase.auth().signOut()}>{\"Sign out \" + this.props.user.displayName + \"?\"}</a>\n        </div>\n        )\n    }\n  }\n}\n\nexport default SignInForm;","import * as React from \"react\";\nimport { VictoryChart, VictoryLine, VictoryArea } from \"victory\";\nimport { Event } from \"./Types\";\n\ninterface Props {\n    event: Event;\n    wca_id: string;\n    home_times: number[];\n}\n\ntype result_kind = \"single\" | \"average\";\n\ninterface State {\n    single_or_avg: result_kind;\n    wca_pb?: number;\n}\n\nclass WCACard extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { single_or_avg: \"single\", wca_pb: undefined }\n    }\n\n    componentDidMount() {\n        const WCA_API_PREFIX = \"http://www.worldcubeassociation.org/api/v0/persons/\"\n\n        this.maybe_get_wca_pb= this.maybe_get_wca_pb.bind(this);\n\n        fetch(WCA_API_PREFIX + this.props.wca_id)\n          .then(function(response: Response) {\n            return response.json();\n          })\n          .then((person_json) => {\n            this.maybe_get_wca_pb(person_json, this.state.single_or_avg);\n          });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const WCA_API_PREFIX = \"http://www.worldcubeassociation.org/api/v0/persons/\"\n\n        if (this.props.event !== prevProps.event || this.props.wca_id !== prevProps.wca_id) {\n            fetch(WCA_API_PREFIX + this.props.wca_id)\n              .then(function(response: Response) {\n                return response.json();\n              })\n              .then((person_json) => {\n                this.maybe_get_wca_pb(person_json, this.state.single_or_avg);\n              });\n        }\n    }\n\n    // returns false if there are no official results for the event/kind pair\n    // otherwise, returns true and sets the state to reflect the WCA pb\n    private maybe_get_wca_pb(person_json: any, which_kind: result_kind): boolean {\n        const event_str = this.props.event.wca_db_str;\n\n        if (!person_json.hasOwnProperty(\"personal_records\")) {\n            this.setState({\n                wca_pb: undefined,\n            })\n\n            return false;\n        } else if (!person_json[\"personal_records\"].hasOwnProperty(event_str)) {\n            this.setState({\n                wca_pb: undefined,\n            })\n\n            return false;\n        } else if (!person_json[\"personal_records\"][event_str].hasOwnProperty(which_kind)) {\n            this.setState({\n                wca_pb: undefined,\n            })\n\n            return false;\n        } else {\n            this.setState({\n                wca_pb: person_json[\"personal_records\"][event_str][which_kind][\"best\"],\n            })\n\n            return true;\n        }\n    }\n\n    public render() {\n        const tachyons_styles = \"dn db-ns outline\"\n        if (this.state.wca_pb === undefined) {\n            return (\n                <div className={tachyons_styles}>\n                    <p className=\"tc\">No WCA data available.</p>\n                </div>\n            );\n        } else {\n            const y_vals = this.props.home_times;\n\n            let data = [];\n\n            for (let x = 0; x < y_vals.length; x++) {\n                data.push({ x: x, y: y_vals[x] })\n            }\n\n            return (\n                <div className={tachyons_styles}>\n                    <VictoryChart\n                    height={200}\n                    >\n                        <VictoryArea\n                            data={data}\n                            y0={() => this.state.wca_pb!}\n                            style={{\n                                data: {\n                                    fill: \"#cccccc\"\n                                } \n                            }}\n                        />\n                        <VictoryLine\n                            labels={[this.state.wca_pb]}\n                            style={{\n                                data: {\n                                    stroke: \"#ff0000\"\n                                }\n                            }}\n                            y={() => this.state.wca_pb!}\n                        />\n                    </VictoryChart>\n                </div>\n            );\n        }\n    }\n}\n\nexport default WCACard;\n","import * as React from \"react\";\n\ninterface Props {\n    wca_id: string;\n    id_change_handler: (event: React.ChangeEvent<HTMLFormElement>, new_id: string) => void;\n}\n\ninterface State {\n    wca_id: string;\n}\n\nclass SettingsCard extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            wca_id: this.props.wca_id,\n        };\n\n        this.updateFormContent = this.updateFormContent.bind(this);\n        this.submitWCAId = this.submitWCAId.bind(this);\n    }\n\n    private updateFormContent(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ wca_id: e.target.value });\n    }\n\n    private submitWCAId(e: React.ChangeEvent<HTMLFormElement>) {\n        this.props.id_change_handler(e, this.state.wca_id);\n    }\n\n    public render() {\n        return (\n            <div className=\"outline\" id=\"event_sel\">\n                <div className=\"f5 b small-caps tc\">Settings</div>\n\n                <form className=\"pa1 black-80\" onSubmit={this.submitWCAId}>\n                    <div className=\"measure\">\n                        <label className=\"f6 b db mb2\">WCA ID</label>\n                        <input\n                            id=\"name\"\n                            className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n                            type=\"text\"\n                            onChange={this.updateFormContent}\n                            value={this.state.wca_id}\n                        />\n                        <input type=\"submit\" value=\"Set\" />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default SettingsCard;\n","import * as React from \"react\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport {\n    timeSince,\n    timeToJson,\n    timeToRaw,\n    timeFromJson,\n    bucketToJsonAvg,\n    isFaster,\n    compareTimes,\n} from \"./Util\";\nimport { Time, Penalty, JsonAvg, TimerPhase, WhichScramble, Event, StatsRecord } from \"./Types\";\nimport ScrambleText from \"./ScrambleText\";\nimport ScoreCard from \"./ScoreCard\";\nimport StatsCard from \"./StatsCard\";\nimport { inspPenalty, TimerDisplay } from \"./TimerDisplay\";\nimport HistoryCard from \"./HistoryCard\";\nimport HistoryDetail from \"./HistoryDetail\";\nimport EventPicker from \"./EventPicker\";\nimport SignInForm from \"./SignInForm\";\nimport WCACard from \"./WCACard\";\nimport SettingsCard from \"./SettingsCard\";\n\ninterface Model {\n    user: firebase.User | null;\n    wca_id: string;\n    startTime: number;\n    elapsed: number;\n    phase: TimerPhase;\n    penalty?: Penalty;\n    bucket: Time[];\n    scramble: string;\n    // scramble_img: React.SVGProps<SVGSVGElement>;\n    scramble_img: { __html: string };\n    current_event: Event;\n    history: { [id: string]: JsonAvg };\n    last_hist_doc?: firebase.firestore.QueryDocumentSnapshot;\n    inspect_avg?: string;\n    cur_event_listeners: Function[];\n    auth_listener: firebase.Unsubscribe;\n    stats: StatsRecord;\n    window_width: number;\n}\n\ndeclare var getScramble: any;\n\nclass Timer extends React.PureComponent<{}, Model> {\n    private intervalID: number;\n    private db = firebase.firestore();\n\n    constructor(props: {}) {\n        super(props);\n\n        const unsub_auth = firebase.auth().onAuthStateChanged(user => {\n            this.setState({ user: user });\n            this.subscribe_to_event(this.state.current_event);\n        });\n\n        this.state = {\n            user: null,\n            wca_id: \"\",\n            startTime: 0,\n            elapsed: 0,\n            phase: { name: \"waiting\" },\n            penalty: undefined,\n            bucket: [],\n            scramble: \"Loading scramble...\",\n            scramble_img: { __html: \"\" },\n            current_event: { name: \"3x3x3\", avg_size: 5, scramble_str: \"333\", wca_db_str: \"333\" },\n            history: {},\n            cur_event_listeners: [],\n            auth_listener: unsub_auth,\n            stats: {\n                pb_single: -2,\n                pb_single_loc: \"\",\n                pb_avg: null,\n                pb_avg_loc: null,\n            },\n            window_width: window.innerWidth,\n        };\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleTouchStart = this.handleTouchStart.bind(this);\n        this.handleTouchEnd = this.handleTouchEnd.bind(this);\n        this.handleWindowSizeChange = this.handleWindowSizeChange.bind(this);\n        this.changeEvent = this.changeEvent.bind(this);\n        this.changeWCAId = this.changeWCAId.bind(this);\n        this.loadMoreHistory = this.loadMoreHistory.bind(this);\n        this.toggle_last_penalty = this.toggle_last_penalty.bind(this);\n        this.delete_last_time = this.delete_last_time.bind(this);\n        this.delete_avg = this.delete_avg.bind(this);\n        this.inspect_avg = this.inspect_avg.bind(this);\n        this.uninspect_avg = this.uninspect_avg.bind(this);\n\n        this.intervalID = 0;\n    }\n\n    public componentDidMount() {\n        this.intervalID = window.setInterval(() => this.tick(), 1);\n\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n        document.addEventListener(\"keyup\", this.handleKeyUp);\n        document.addEventListener(\"touchstart\", this.handleTouchStart);\n        document.addEventListener(\"touchend\", this.handleTouchEnd);\n\n        window.addEventListener(\"resize\", this.handleWindowSizeChange);\n    }\n\n    public componentWillUnmount() {\n        window.clearInterval(this.intervalID);\n\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n        document.removeEventListener(\"keyup\", this.handleKeyUp);\n\n        window.removeEventListener(\"resize\", this.handleWindowSizeChange);\n\n        // stop listening to any firestore docs\n        for (var unsub_func of this.state.cur_event_listeners) {\n            unsub_func();\n        }\n\n        this.state.auth_listener();\n    }\n\n    private subscribe_to_event(e: Event) {\n        this.setState({\n            scramble: getScramble(e.scramble_str),\n        });\n\n        // unsub from previous event\n        for (var unsub_func of this.state.cur_event_listeners) {\n            unsub_func();\n        }\n\n        if (this.state.user === null) {\n            return;\n        } else {\n            const target_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(e.wca_db_str);\n\n            // Fetch event history\n            const unsub_history = target_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"timestamp\", \"desc\")\n                .limit(25)\n                .onSnapshot(snap => {\n                    const avgs = snap.docs.map(doc => doc.data() as JsonAvg);\n                    const doc_ids = snap.docs.map(doc => doc.id);\n\n                    let new_hist: { [id: string]: JsonAvg } = {};\n                    doc_ids.forEach((id, i) => (new_hist[id] = avgs[i]));\n\n                    this.setState({\n                        history: new_hist,\n                        last_hist_doc: snap.docs[snap.docs.length - 1],\n                    });\n                });\n\n            // Fetch current average\n            const unsub_bucket = target_event_doc.onSnapshot(snap => {\n                let bucket_times = [];\n\n                if (snap.get(\"bucket\") !== undefined) {\n                    bucket_times = snap.get(\"bucket\").map(timeFromJson);\n                }\n\n                this.setState({\n                    bucket: bucket_times,\n                });\n            });\n\n            this.setState((state, props) => {\n                return { ...state, cur_event_listeners: [unsub_bucket, unsub_history] };\n            });\n\n            // Fetch event stats\n            const unsub_stats = target_event_doc.onSnapshot(snap => {\n                const saved = snap.get(\"stats\");\n                if (saved === undefined) {\n                    this.setState({\n                        stats: {\n                            pb_single: -2,\n                            pb_single_loc: \"\",\n                            pb_avg: null,\n                            pb_avg_loc: null,\n                        },\n                    });\n                } else {\n                    this.setState({\n                        stats: {\n                            pb_single: saved.pb_single === undefined ? -2 : saved.pb_single,\n                            pb_single_loc:\n                                saved.pb_single_loc === undefined ? \"\" : saved.pb_single_loc,\n                            pb_avg: saved.pb_avg === undefined ? null : saved.pb_avg,\n                            pb_avg_loc: saved.pb_avg_loc === undefined ? null : saved.pb_avg_loc,\n                        },\n                    });\n                }\n            });\n        }\n    }\n\n    private loadMoreHistory() {\n        if (this.state.user === null) {\n            alert(\"Error (loadMoreHistory): User is null\");\n            return;\n        } else {\n            const target_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n\n            target_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"timestamp\", \"desc\")\n                .limit(25)\n                .startAfter(this.state.last_hist_doc)\n                .get()\n                .then(snap => {\n                    if (snap.docs.length === 0) {\n                        return;\n                    }\n\n                    const new_avgs = snap.docs.map(doc => doc.data() as JsonAvg);\n                    const new_keys = snap.docs.map(doc => doc.id);\n                    let new_hist: { [id: string]: JsonAvg } = {};\n                    new_keys.forEach((id, i) => (new_hist[id] = new_avgs[i]));\n\n                    this.setState((state, props) => {\n                        return {\n                            history: Object.assign({}, state.history, new_hist),\n                            last_hist_doc: snap.docs[snap.docs.length - 1],\n                        };\n                    });\n                });\n        }\n    }\n\n    private saveTimeToDB(t: Time): void {\n        // if there's no current user the time is discarded\n        if (this.state.user === null) {\n            alert(\"Error (saveTimeToDB): User is null\");\n        } else {\n            // this function is called right before setstate, so we need to\n            // manually compute what the bucket will look like on the next render\n            const bucket_is_full = this.state.bucket.length === this.state.current_event.avg_size;\n            const next_bucket = bucket_is_full ? [t] : this.state.bucket.concat([t]);\n            const bucket_json = next_bucket.map(timeToJson);\n\n            // get a path to the db document for the current event\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n\n            // if we finished an avg, save it to the db\n            const new_time = timeToRaw(t);\n            const pb_single = this.state.stats.pb_single;\n            const pb_single_loc = this.state.stats.pb_single_loc;\n            const pb_avg = this.state.stats.pb_avg;\n            const pb_avg_loc = this.state.stats.pb_avg_loc;\n\n            if (bucket_is_full) {\n                const avg_json = bucketToJsonAvg(this.state.bucket);\n                current_event_doc\n                    .collection(\"Avgs\")\n                    .add(avg_json)\n                    .then(avg_doc_ref => {\n                        // if the current pb single is in the bucket and not\n                        // about to be beaten by the new time, update its location\n                        // (checking now saves a query if we did just break the pb)\n                        if (pb_single_loc === \"bucket\" && isFaster(pb_single, new_time)) {\n                            current_event_doc.set(\n                                {\n                                    stats: {\n                                        pb_single_loc: avg_doc_ref.id,\n                                    },\n                                },\n                                { merge: true }\n                            );\n                        }\n\n                        // Check for a new PB avg and update stats if necessary\n                        if (pb_avg === null || isFaster(avg_json.avg, pb_avg)) {\n                            current_event_doc.set(\n                                {\n                                    stats: {\n                                        pb_avg: avg_json.avg,\n                                        pb_avg_loc: avg_doc_ref.id,\n                                    },\n                                },\n                                { merge: true }\n                            );\n                        }\n                    });\n            }\n\n            // Check for a new PB single and update stats if necessary\n            if (pb_single === -2 || isFaster(new_time, pb_single)) {\n                current_event_doc.set(\n                    {\n                        stats: {\n                            pb_single: new_time,\n                            pb_single_loc: \"bucket\",\n                        },\n                    },\n                    { merge: true }\n                );\n            }\n\n            // add the new time to the db\n            current_event_doc.set(\n                {\n                    bucket: bucket_json,\n                },\n                { merge: true }\n            );\n        }\n    }\n\n    private toggle_last_penalty(pen: Penalty) {\n        if (this.state.user === null) {\n            alert(\"Error (toggle_last_penalty): User is null\");\n        } else {\n            const old_bucket = this.state.bucket.slice();\n            const old_time = old_bucket.pop();\n\n            // there must be a previous solve to penalize\n            if (old_time === undefined) {\n                console.error(\"Tried to toggle penalty with no previous solve\");\n                return;\n            }\n\n            const old_pen = old_time!.pen;\n            const new_time =\n                pen === old_pen\n                    ? { raw: old_time!.raw, pen: undefined }\n                    : { raw: old_time!.raw, pen: pen };\n\n            const new_bucket = old_bucket.concat([new_time]);\n            const new_bucket_json = new_bucket.map(timeToJson);\n\n            // get a path to the db document for the current event\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n\n            current_event_doc\n                .set(\n                    {\n                        bucket: new_bucket_json,\n                    },\n                    { merge: true }\n                )\n                .then(() => {\n                    this.recompute_pb_single(new_bucket);\n                });\n        }\n    }\n\n    // compute the pb single over the history of averages and the bucket passed in\n    private recompute_pb_single(bucket: Time[]) {\n        if (this.state.user === null) {\n            alert(\"Error (recompute_pb_single): User is null\");\n        } else {\n            // find the best single currently in the bucket\n            let best_in_bucket = -2; // recall -2 means \"no pb single exists\"\n            if (bucket.length !== 0) {\n                best_in_bucket = -1;\n                for (let t of bucket.map(timeToRaw)) {\n                    if (isFaster(t, best_in_bucket)) {\n                        best_in_bucket = t;\n                    }\n                }\n            }\n\n            // find the best single in any stored average\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n            current_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"best\", \"asc\")\n                .limit(1)\n                .get()\n                .then(snap => {\n                    if (snap.docs.length === 0) {\n                        // if there are no stored avgs, bucket pb wins\n                        current_event_doc.set(\n                            {\n                                stats: {\n                                    pb_single: best_in_bucket,\n                                    pb_single_loc: \"bucket\",\n                                },\n                            },\n                            { merge: true }\n                        );\n                    } else if (best_in_bucket === -2) {\n                        // if there are stored avgs and bucket pb doesn't exist, avg pb wins\n                        const containing_avg = snap.docs[0].data() as JsonAvg;\n                        const best_in_hist = containing_avg.best;\n\n                        current_event_doc.set(\n                            {\n                                stats: {\n                                    pb_single: best_in_hist,\n                                    pb_single_loc: snap.docs[0].id,\n                                },\n                            },\n                            { merge: true }\n                        );\n                    } else {\n                        // else, compare the best pb from an avg with bucket pb\n                        const containing_avg = snap.docs[0].data() as JsonAvg;\n                        const best_in_hist = containing_avg.best;\n\n                        current_event_doc.set(\n                            isFaster(best_in_bucket, best_in_hist)\n                                ? {\n                                      stats: {\n                                          pb_single: best_in_bucket,\n                                          pb_single_loc: \"bucket\",\n                                      },\n                                  }\n                                : {\n                                      stats: {\n                                          pb_single: best_in_hist,\n                                          pb_single_loc: snap.docs[0].id,\n                                      },\n                                  },\n                            { merge: true }\n                        );\n                    }\n                });\n        }\n    }\n\n    // compute the pb single over the history of averages and the bucket passed in\n    private recompute_pb_avg() {\n        if (this.state.user === null) {\n            alert(\"Error (recompute_pb_avg): User is null\");\n        } else {\n            // find the best stored average\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n            current_event_doc\n                .collection(\"Avgs\")\n                .orderBy(\"avg\", \"asc\")\n                .limit(1)\n                .get()\n                .then(snap => {\n                    if (snap.docs.length === 0) {\n                        // if there are no stored avgs, pb avg doesn't exist\n                        current_event_doc.set(\n                            {\n                                stats: {\n                                    pb_avg: null,\n                                    pb_avg_loc: null,\n                                },\n                            },\n                            { merge: true }\n                        );\n                    } else {\n                        // update the stats with the new best avg\n                        const new_pb_avg = snap.docs[0].data() as JsonAvg;\n                        current_event_doc.set(\n                            {\n                                stats: {\n                                    pb_avg: new_pb_avg.avg,\n                                    pb_avg_loc: snap.docs[0].id,\n                                },\n                            },\n                            { merge: true }\n                        );\n                    }\n                });\n        }\n    }\n\n    private delete_last_time() {\n        if (this.state.user === null) {\n            alert(\"Error (delete_last_time): User is null\");\n        } else {\n            // delete the most recent time\n            let new_bucket = this.state.bucket.slice();\n            const deleted_time = new_bucket.pop();\n\n            // get a path to the db document for the current event\n            const current_event_doc = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str);\n\n            // update the bucket\n            current_event_doc.set(\n                {\n                    bucket: new_bucket.map(timeToJson),\n                },\n                { merge: true }\n            );\n\n            // recompute the pb single if we just deleted it\n            if (timeToRaw(deleted_time!) === this.state.stats.pb_single) {\n                this.recompute_pb_single(new_bucket);\n            }\n        }\n    }\n\n    private delete_avg(id: string) {\n        if (this.state.user === null) {\n            alert(\"Error (delete_avg): User is null\");\n        } else {\n            const hist_ref = this.db\n                .collection(\"Users\")\n                .doc(this.state.user.uid)\n                .collection(\"Events\")\n                .doc(this.state.current_event.wca_db_str)\n                .collection(\"Avgs\");\n            hist_ref\n                .doc(id)\n                .delete()\n                .then(() => {\n                    // recompute pb single if we just deleted it\n                    if (id === this.state.stats.pb_single_loc) {\n                        this.recompute_pb_single(this.state.bucket);\n                    }\n                    // recompute pb avg if we just deleted it\n                    if (id === this.state.stats.pb_avg_loc) {\n                        this.recompute_pb_avg();\n                    }\n                });\n        }\n    }\n\n    private handleTouchStart(event: TouchEvent) {\n        this.setState((state, props) => {\n            let nextstate: Model;\n            switch (state.phase.name) {\n                case \"inspecting\":\n                    nextstate = {\n                        ...state,\n                        phase: { name: \"red\", timeTurnedRed: Date.now() },\n                    };\n                    break;\n\n                case \"running\":\n                    let timetosave = {\n                        // convert to centiseconds\n                        raw: Math.floor(state.elapsed / 10),\n                        pen: state.penalty,\n                    };\n\n                    nextstate = {\n                        ...state,\n                        phase: { name: \"stopped\" },\n                        scramble: getScramble(state.current_event.scramble_str),\n                    };\n\n                    this.saveTimeToDB(timetosave);\n                    break;\n\n                default:\n                    nextstate = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextstate;\n        });\n    }\n\n    private handleTouchEnd(event: TouchEvent) {\n        this.setState((state, props) => {\n            let nextState: Model;\n            switch (state.phase.name) {\n                case \"waiting\":\n                    if (\n                        event.target === document.getElementById(\"timer_main\") ||\n                        event.target === document.getElementById(\"timer_text\")\n                    ) {\n                        nextState = {\n                            ...state,\n                            startTime: Date.now(),\n                            phase: { name: \"inspecting\" },\n                        };\n                    } else {\n                        nextState = state;\n                    }\n                    break;\n                case \"red\":\n                    nextState = {\n                        ...state,\n                        phase: { name: \"inspecting\" },\n                    };\n                    break;\n                case \"green\":\n                    // start the solve phase\n                    nextState = {\n                        ...state,\n                        startTime: Date.now(),\n                        elapsed: 0,\n                        phase: { name: \"running\" },\n                    };\n                    break;\n                case \"stopped\":\n                    nextState = {\n                        ...state,\n                        phase: { name: \"waiting\" },\n                    };\n                    break;\n                default:\n                    nextState = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextState;\n        });\n    }\n\n    private handleKeyDown(event: KeyboardEvent) {\n        this.setState((state, props) => {\n            let nextState: Model;\n            switch (state.phase.name) {\n                case \"inspecting\":\n                    nextState =\n                        event.code === \"Space\" // only spacebar should ready the timer\n                            ? {\n                                  ...state,\n                                  phase: { name: \"red\", timeTurnedRed: Date.now() },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n\n                case \"running\":\n                    let timeToSave = {\n                        // convert to centiseconds\n                        raw: Math.floor(state.elapsed / 10),\n                        pen: state.penalty,\n                    };\n\n                    nextState = {\n                        ...state,\n                        phase: { name: \"stopped\" },\n                        scramble: getScramble(state.current_event.scramble_str),\n                    };\n\n                    this.saveTimeToDB(timeToSave);\n                    break;\n\n                default:\n                    nextState = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextState;\n        });\n    }\n\n    private handleKeyUp(event: KeyboardEvent) {\n        this.setState((state, props) => {\n            let nextState: Model;\n            switch (state.phase.name) {\n                case \"waiting\":\n                    // only spacebar should start inspection\n                    nextState =\n                        event.code === \"Space\"\n                            ? {\n                                  ...state,\n                                  startTime: Date.now(),\n                                  phase: { name: \"inspecting\" },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n                case \"red\":\n                    // only lifting spacebar should return to inspection\n                    nextState =\n                        event.code === \"Space\"\n                            ? {\n                                  ...state,\n                                  phase: { name: \"inspecting\" },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n                case \"green\":\n                    // start the solve phase\n                    nextState =\n                        event.code === \"Space\" // only spacebar should start the timer\n                            ? {\n                                  ...state,\n                                  startTime: Date.now(),\n                                  elapsed: 0,\n                                  phase: { name: \"running\" },\n                              }\n                            : {\n                                  ...state,\n                              };\n                    break;\n                case \"stopped\":\n                    nextState = {\n                        ...state,\n                        phase: { name: \"waiting\" },\n                    };\n                    break;\n                default:\n                    nextState = {\n                        ...state,\n                    };\n                    break;\n            }\n\n            return nextState;\n        });\n    }\n\n    private tick() {\n        this.setState((state, props) => {\n            let nextState: Model;\n\n            switch (state.phase.name) {\n                case \"red\":\n                    if (timeSince(state.phase.timeTurnedRed) >= 550) {\n                        nextState = {\n                            ...state,\n                            elapsed: timeSince(state.startTime),\n                            phase: { name: \"green\" },\n                            penalty: inspPenalty(state.elapsed),\n                        };\n                    } else {\n                        nextState = {\n                            ...state,\n                            elapsed: timeSince(state.startTime),\n                            penalty: inspPenalty(state.elapsed),\n                        };\n                    }\n                    break;\n                case \"inspecting\":\n                    nextState = {\n                        ...state,\n                        elapsed: timeSince(state.startTime),\n                        penalty: inspPenalty(state.elapsed),\n                    };\n                    break;\n                case \"green\":\n                    nextState = {\n                        ...state,\n                        elapsed: timeSince(state.startTime),\n                        penalty: inspPenalty(state.elapsed),\n                    };\n                    break;\n                case \"running\":\n                    nextState = {\n                        ...state,\n                        elapsed: timeSince(state.startTime),\n                    };\n                    break;\n                default:\n                    nextState = state;\n                    break;\n            }\n            return nextState;\n        });\n    }\n\n    private changeEvent(selected: Event | Event[] | null | undefined) {\n        if (selected && !(selected instanceof Array)) {\n            this.setState({\n                current_event: selected,\n            });\n            this.subscribe_to_event(selected);\n        } else {\n            console.log(\"Invalid input to event select handler.\");\n        }\n    }\n\n    private changeWCAId(e: React.FormEvent<HTMLFormElement>, new_id: string): void {\n        this.setState({ wca_id: new_id });\n        e.preventDefault();\n    }\n\n    // all times from history and bucket, from least to most recent\n    private all_times_raw_array(): number[] {\n        // TODO: check for sorting bugs\n        const bucket_times = this.state.bucket.map(t => timeToRaw(t));\n        const compare_by_timestamp = (avg1: JsonAvg, avg2: JsonAvg) => {\n            const d1 = avg1.timestamp.toDate();\n            const d2 = avg2.timestamp.toDate();\n            if (d1 < d2) {\n                return 1;\n            } else if (d1 > d2) {\n                return -1;\n            } else {\n                return 0;\n            }\n        };\n\n        const hist_times = Object.values(this.state.history)\n            .sort(compare_by_timestamp)\n            .flatMap(avg => avg.times);\n\n        return hist_times.concat(bucket_times);\n    }\n\n    private inspect_avg(avg_id: string) {\n        this.setState({\n            inspect_avg: avg_id,\n        });\n    }\n\n    private uninspect_avg() {\n        this.setState({\n            inspect_avg: undefined,\n        });\n    }\n\n    private handleWindowSizeChange() {\n        this.setState({\n            window_width: window.innerWidth,\n        });\n    }\n\n    public render() {\n        const is_mobile = this.state.window_width <= 500;\n        if (!is_mobile) {\n            return (\n                <section className=\"flex items-start justify-between w-100 overflow-hidden vh-100\">\n                    <div className=\"flex flex-column vh-100 justify-between w-25 outline\">\n                        <div className=\"outline\">\n                            <EventPicker\n                                onChange={this.changeEvent}\n                                isDisabled={this.state.phase.name !== \"waiting\"}\n                            />\n                            <StatsCard\n                                event={this.state.current_event}\n                                stats={this.state.stats}\n                                inspect_func={this.inspect_avg}\n                            />\n                        </div>\n                        <HistoryCard\n                            hist={this.state.history}\n                            load_more_func={this.loadMoreHistory}\n                            inspect_func={this.inspect_avg}\n                        />\n                    </div>\n\n                    <div className=\"flex flex-column justify-between vh-100 w-50 outline\">\n                        {this.state.inspect_avg === undefined ? (\n                            <React.Fragment>\n                                <ScrambleText\n                                    scramble={this.state.scramble}\n                                    event={this.state.current_event}\n                                />\n                                <TimerDisplay\n                                    ms={this.state.elapsed}\n                                    phase={this.state.phase}\n                                    pen={this.state.penalty}\n                                />\n                                <div>\n                                    <ScoreCard\n                                        times={this.state.bucket}\n                                        edit_fn={this.toggle_last_penalty}\n                                        delete_fn={this.delete_last_time}\n                                        avg_size={this.state.current_event.avg_size}\n                                    />\n                                    <WCACard\n                                        event={this.state.current_event}\n                                        wca_id={this.state.wca_id}\n                                        home_times={this.all_times_raw_array()}\n                                    />\n                                </div>\n                            </React.Fragment>\n                        ) : (\n                            <React.Fragment>\n                                <HistoryDetail\n                                    avg_id={this.state.inspect_avg}\n                                    avg_json={this.state.history[this.state.inspect_avg]}\n                                    delete_func={this.delete_avg}\n                                    close_func={this.uninspect_avg}\n                                />\n                            </React.Fragment>\n                        )}\n                    </div>\n\n                    <div className=\"flex flex-column-reverse vh-100 justify-between w-25 outline\">\n                        <div>\n                            <SettingsCard\n                                wca_id={this.state.wca_id}\n                                id_change_handler={this.changeWCAId}\n                            />\n                            <SignInForm user={this.state.user} />\n                        </div>\n                    </div>\n                </section>\n            );\n        } else {\n            // mobile UI\n            return (\n                <section className=\"flex flex-column justify-between w-100 vh-100 noselect\">\n                    <div className=\"w-100 outline\">\n                        <EventPicker\n                            onChange={this.changeEvent}\n                            isDisabled={this.state.phase.name !== \"waiting\"}\n                        />\n                        <ScrambleText\n                            scramble={this.state.scramble}\n                            event={this.state.current_event}\n                        />\n                    </div>\n\n                    <div id=\"timer_main\" className=\"vh-100 noselect\">\n                        <TimerDisplay\n                            ms={this.state.elapsed}\n                            phase={this.state.phase}\n                            pen={this.state.penalty}\n                        />\n                    </div>\n\n                    <div className=\"w-100 outline\">\n                        <ScoreCard\n                            times={this.state.bucket}\n                            edit_fn={this.toggle_last_penalty}\n                            delete_fn={this.delete_last_time}\n                            avg_size={this.state.current_event.avg_size}\n                        />\n                        {/*                        <HistoryCard\n                            hist={{  }}\n                            load_more_func={this.loadMoreHistory}\n                            inspect_func={this.inspect_avg}\n                        />\n*/}{\" \"}\n                        <SignInForm user={this.state.user} />\n                    </div>\n                </section>\n            );\n        }\n    }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as firebase from \"firebase/app\";\nimport Timer from \"./Timer\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDwiz-hIBeojGWqnk6rE7Ao3b7LS9-Wg6g\",\n  authDomain: \"timer-v0.firebaseapp.com\",\n  databaseURL: \"https://timer-v0.firebaseio.com\",\n  projectId: \"timer-v0\",\n  storageBucket: \"timer-v0.appspot.com\",\n  messagingSenderId: \"998055254824\",\n  appId: \"1:998055254824:web:3149843957307226\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<Timer />, document.getElementById(\"root\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}